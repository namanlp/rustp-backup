'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var focus = require('ariakit-utils/focus');
var hooks = require('ariakit-utils/hooks');
var store = require('ariakit-utils/store');
var system = require('ariakit-utils/system');
var hovercard_hovercard = require('../hovercard/hovercard.js');
var __utils = require('../__utils-6be0b335.js');
var menu_menuList = require('./menu-list.js');

function getItemRefById(items, id) {
  var _items$find;

  if (!id) return;
  return (_items$find = items.find(item => item.id === id)) == null ? void 0 : _items$find.ref;
}
/**
 * A component hook that returns props that can be passed to `Role` or any other
 * Ariakit component to render a dropdown menu element.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const state = useMenuState();
 * const props = useMenu({ state });
 * <MenuButton state={state}>Edit</MenuButton>
 * <Role {...props}>
 *   <MenuItem>Undo</MenuItem>
 *   <MenuItem>Redo</MenuItem>
 * </Role>
 * ```
 */


const useMenu = system.createHook(_ref => {
  let {
    state,
    hideOnEscape = true,
    autoFocusOnShow = true,
    hideOnHoverOutside,
    ...props
  } = _ref;
  const parentMenu = store.useStore(__utils.MenuContext, []);
  const parentMenuBar = store.useStore(__utils.MenuBarContext, []);
  const hasParentMenu = !!parentMenu;
  const parentIsMenuBar = !!parentMenuBar && !hasParentMenu;
  const onKeyDownProp = props.onKeyDown;
  const hideOnEscapeProp = hooks.useBooleanEvent(hideOnEscape);
  const onKeyDown = hooks.useEvent(event => {
    onKeyDownProp == null ? void 0 : onKeyDownProp(event);
    if (event.defaultPrevented) return;

    if (event.key === "Escape") {
      if (!hideOnEscapeProp(event)) return;

      if (!hasParentMenu) {
        // On Esc, only stop propagation if there's no parent menu. Otherwise,
        // pressing Esc should close all menus
        event.stopPropagation();
      }

      return state.hide();
    }
  });
  props = { ...props,
    onKeyDown
  }; // The aria-labelledby prop on MenuList defaults to the MenuButton's id. On
  // Dialog/Popover/Hovercard/Menu, we need to consider MenuHeading as well
  // and it should take precedence. That's why we need to destructure this
  // prop here and check if aria-labelledby is set later.

  const {
    "aria-labelledby": ariaLabelledBy,
    ...menuListProps
  } = menu_menuList.useMenuList({
    state,
    ...props
  });
  props = menuListProps;
  const [initialFocusRef, setInitialFocusRef] = react.useState(); // Sets the initial focus ref.

  react.useEffect(() => {
    let cleaning = false;
    setInitialFocusRef(prevInitialFocusRef => {
      if (cleaning) return;
      if (!state.autoFocusOnShow) return;
      if (prevInitialFocusRef) return prevInitialFocusRef;

      switch (state.initialFocus) {
        case "first":
          return getItemRefById(state.items, state.first());

        case "last":
          return getItemRefById(state.items, state.last());

        default:
          return state.baseRef;
      }
    });
    return () => {
      cleaning = true;
    };
  }, [state.autoFocusOnShow, state.initialFocus, state.items, state.first, state.last, state.baseRef]);
  const mayAutoFocusOnShow = !!autoFocusOnShow; // When the `autoFocusOnShow` prop is set to `true` (default), we'll only
  // move focus to the menu when there's an initialFocusRef set or the menu is
  // modal. Otherwise, users would have to manually call
  // state.setAutoFocusOnShow(true) every time they want to open the menu.
  // This differs from the usual dialog behavior that would automatically
  // focus on the dialog container when no initialFocusRef is set.

  const canAutoFocusOnShow = !!initialFocusRef || !!props.initialFocusRef || !!props.modal;
  props = hovercard_hovercard.useHovercard({
    state,
    initialFocusRef,
    autoFocusOnShow: mayAutoFocusOnShow ? canAutoFocusOnShow && autoFocusOnShow : state.autoFocusOnShow || !!props.modal,
    ...props,
    hideOnHoverOutside: event => {
      if (typeof hideOnHoverOutside === "function") {
        return hideOnHoverOutside(event);
      }

      if (hideOnHoverOutside != null) return hideOnHoverOutside;

      if (hasParentMenu) {
        parentMenu.setActiveId(null);
        return true;
      }

      if (!parentIsMenuBar) return false;
      const disclosure = state.disclosureRef.current;
      if (!disclosure) return true;
      if (focus.hasFocusWithin(disclosure)) return false;
      return true;
    },
    // If it's a submenu, it shouldn't behave like a modal dialog, nor display
    // a backdrop.
    modal: hasParentMenu ? false : props.modal,
    backdrop: hasParentMenu ? false : props.backdrop,
    // If it's a submenu, hide on esc will be handled differently. That is,
    // event.stopPropagation() won't be called, so the parent menus will also
    // be closed.
    hideOnEscape: hasParentMenu ? false : hideOnEscape
  });
  props = {
    "aria-labelledby": ariaLabelledBy,
    ...props
  };
  return props;
});
/**
 * A component that renders a dropdown menu element.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const menu = useMenuState();
 * <MenuButton state={menu}>Edit</MenuButton>
 * <Menu state={menu}>
 *   <MenuItem>Undo</MenuItem>
 *   <MenuItem>Redo</MenuItem>
 * </Menu>
 * ```
 */

const Menu = system.createComponent(props => {
  const htmlProps = useMenu(props);
  return system.createElement("div", htmlProps);
});

if (process.env.NODE_ENV !== "production") {
  Menu.displayName = "Menu";
}

exports.Menu = Menu;
exports.useMenu = useMenu;
