'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var focus = require('ariakit-utils/focus');
var hooks = require('ariakit-utils/hooks');
var system = require('ariakit-utils/system');
var focusTrap_focusTrap = require('./focus-trap.js');
var jsxRuntime = require('react/jsx-runtime');

const useFocusTrapRegion = system.createHook(_ref => {
  let {
    enabled = false,
    ...props
  } = _ref;
  const ref = react.useRef(null);
  props = hooks.useWrapElement(props, element => {
    const renderFocusTrap = () => {
      if (!enabled) return null;
      return /*#__PURE__*/jsxRuntime.jsx(focusTrap_focusTrap.FocusTrap, {
        onFocus: event => {
          const container = ref.current;
          if (!container) return;
          const tabbables = focus.getAllTabbableIn(container, true);
          const first = tabbables[0];
          const last = tabbables[tabbables.length - 1]; // Fallbacks to the container element

          if (!tabbables.length) {
            container.focus();
            return;
          }

          if (event.relatedTarget === first) {
            last == null ? void 0 : last.focus();
          } else {
            first == null ? void 0 : first.focus();
          }
        }
      });
    };

    return /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [renderFocusTrap(), element, renderFocusTrap()]
    });
  }, [enabled]);
  props = { ...props,
    ref: hooks.useForkRef(ref, props.ref)
  };
  return props;
});
/**
 * A component that renders a focus trap region element.
 * @see https://ariakit.org/components/focus-trap-region
 * @example
 * ```jsx
 * <FocusTrapRegion>
 *  <Button>click me</Button>
 *  <Button>trap focus</Button>
 *  <Button disabled>disabled Button</Button>
 * </FocusTrapRegion>
 * ```
 */

const FocusTrapRegion = system.createComponent(props => {
  const htmlProps = useFocusTrapRegion(props);
  return system.createElement("div", htmlProps);
});

if (process.env.NODE_ENV !== "production") {
  FocusTrapRegion.displayName = "FocusTrapRegion";
}

exports.FocusTrapRegion = FocusTrapRegion;
exports.useFocusTrapRegion = useFocusTrapRegion;
