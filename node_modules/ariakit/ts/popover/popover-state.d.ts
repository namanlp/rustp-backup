import { MutableRefObject, RefObject } from "react";
import { VirtualElement } from "@floating-ui/dom";
import { SetState } from "ariakit-utils/types";
import { DialogState, DialogStateProps } from "../dialog/dialog-state";
declare type BasePlacement = "top" | "bottom" | "left" | "right";
declare type Placement = BasePlacement | `${BasePlacement}-start` | `${BasePlacement}-end`;
declare type AnchorRect = {
    x?: number;
    y?: number;
    width?: number;
    height?: number;
};
/**
 * Provides state for the `Popover` components.
 * @example
 * ```jsx
 * const popover = usePopoverState();
 * <PopoverDisclosure state={popover}>Disclosure</PopoverDisclosure>
 * <Popover state={popover}>Popover</Popover>
 * ```
 */
export declare function usePopoverState({ placement, fixed, gutter, flip, shift, slide, overlap, sameWidth, fitViewport, arrowPadding, overflowPadding, renderCallback, ...props }?: PopoverStateProps): PopoverState;
export declare type PopoverStateRenderCallbackProps = Pick<PopoverState, "mounted" | "placement" | "fixed" | "gutter" | "shift" | "overlap" | "flip" | "sameWidth" | "fitViewport" | "arrowPadding" | "overflowPadding"> & {
    /**
     * The popover element.
     */
    popover: HTMLElement;
    /**
     * The anchor element.
     */
    anchor: VirtualElement;
    /**
     * The arrow element.
     */
    arrow?: HTMLElement | null;
    /**
     * A method that updates the `currentPlacement` state.
     */
    setPlacement: SetState<Placement>;
    /**
     * The default render callback that will be called when the `renderCallback`
     * prop is not provided.
     */
    defaultRenderCallback: () => () => void;
};
export declare type PopoverState = DialogState & {
    /**
     * Function that returns the anchor element's DOMRect. If this is explicitly
     * passed, it will override the anchor `getBoundingClientRect` method.
     */
    getAnchorRect: (anchor: HTMLElement | null) => AnchorRect | null;
    /**
     * The anchor element.
     */
    anchorRef: MutableRefObject<HTMLElement | null>;
    /**
     * The popover element that will render the placement attributes.
     */
    popoverRef: RefObject<HTMLElement>;
    /**
     * The arrow element.
     */
    arrowRef: RefObject<HTMLElement>;
    /**
     * The current temporary placement state of the popover. This may be different
     * from the the `placement` state if the popover has needed to update its
     * position on the fly.
     */
    currentPlacement: Placement;
    /**
     * The placement of the popover.
     * @default "bottom"
     */
    placement: Placement;
    /**
     * Whether the popover has `position: fixed` or not.
     * @default false
     */
    fixed: boolean;
    /**
     * The distance between the popover and the anchor element. By default, it's 0
     * plus half of the arrow offset, if it exists.
     * @default 0
     */
    gutter?: number;
    /**
     * The skidding of the popover along the anchor element.
     * @default 0
     */
    shift: number;
    /**
     * Controls the behavior of the popover when it overflows the viewport:
     *   - If a `boolean`, specifies whether the popover should flip to the
     *     opposite side when it overflows.
     *   - If a `string`, indicates the preferred fallback placements when it
     *     overflows. The placements must be spaced-delimited, e.g. "top left".
     * @example
     * ```jsx
     * usePopoverState({
     *   placement: "right",
     *   // In case the `right` placement overflows the viewport, the placement
     *   // will fallback to the `bottom` or `top`, in that order, depending on
     *   // where it fits.
     *   flip: "bottom top",
     * });
     * ```
     * @default true
     */
    flip: boolean | string;
    /**
     * Whether the popover should slide when it overflows.
     * @default true
     */
    slide: boolean;
    /**
     * Whether the popover can overlap the anchor element when it overflows.
     * @default false
     */
    overlap: boolean;
    /**
     * Whether the popover should have the same width as the anchor element. This
     * will be exposed to CSS as `--popover-anchor-width`.
     * @default false
     */
    sameWidth: boolean;
    /**
     * Whether the popover should fit the viewport. If this is set to true, the
     * popover wrapper will have `maxWidth` and `maxHeight` set to the viewport
     * size. This will be exposed to CSS as `--popover-available-width` and
     * `--popover-available-height`.
     * @default false
     */
    fitViewport: boolean;
    /**
     * The minimum padding between the arrow and the popover corner.
     * @default 4
     */
    arrowPadding: number;
    /**
     * The minimum padding between the popover and the viewport edge. This will be
     * exposed to CSS as `--popover-overflow-padding`.
     * @default 8
     */
    overflowPadding: number;
    /**
     * A function that can be used to recompute the popover styles. This is useful
     * when the popover anchor changes in a way that affects the popover position.
     */
    render: () => void;
    /**
     * A function that will be called when the popover needs to calculate its
     * styles. It will override the internal behavior.
     */
    renderCallback?: (props: PopoverStateRenderCallbackProps) => void | (() => void);
};
export declare type PopoverStateProps = DialogStateProps & Partial<Pick<PopoverState, "getAnchorRect" | "placement" | "fixed" | "gutter" | "shift" | "flip" | "slide" | "overlap" | "sameWidth" | "fitViewport" | "arrowPadding" | "overflowPadding" | "renderCallback">>;
export {};
