import { useRef, useState, useCallback, useMemo } from 'react';
import { useControlledState, usePreviousValue } from 'ariakit-utils/hooks';

/**
 * Provides state for the `Disclosure` components.
 * @example
 * ```jsx
 * const disclosure = useDisclosureState();
 * <Disclosure state={disclosure}>Disclosure</Disclosure>
 * <DisclosureContent state={disclosure}>Content</DisclosureContent>
 * ```
 */
function useDisclosureState(_temp) {
  var _props$defaultOpen;

  let {
    animated = false,
    ...props
  } = _temp === void 0 ? {} : _temp;
  const disclosureRef = useRef(null);
  const [open, setOpen] = useControlledState((_props$defaultOpen = props.defaultOpen) != null ? _props$defaultOpen : false, props.open, props.setOpen);
  const [contentElement, setContentElement] = useState(null);
  const [animating, setAnimating] = useState(!!animated && open);
  const prevOpen = usePreviousValue(open);
  const mounted = open || animating;

  if (animated && !animating && prevOpen !== open) {
    setAnimating(true);
  }

  const show = useCallback(() => setOpen(true), [setOpen]);
  const hide = useCallback(() => setOpen(false), [setOpen]);
  const toggle = useCallback(() => setOpen(v => !v), [setOpen]);
  const stopAnimation = useCallback(() => setAnimating(false), []);
  const state = useMemo(() => ({
    disclosureRef,
    open,
    mounted,
    animated,
    animating,
    contentElement,
    setContentElement,
    setOpen,
    show,
    hide,
    toggle,
    stopAnimation
  }), [open, mounted, animated, animating, contentElement, setContentElement, setOpen, show, hide, toggle, stopAnimation]);
  return state;
}

export { useDisclosureState };
