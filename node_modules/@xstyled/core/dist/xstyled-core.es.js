import React from 'react';
import { getBreakpoints, system, getColor, getRadius, getBorderStyle, getShadow, getZIndex, getFont, getFontSize, getLineHeight, getFontWeight, getLetterSpacing, getTransition, getPx, getSpace, getBorder, getBorderWidth, getSize } from '@xstyled/system';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import _extends from '@babel/runtime/helpers/esm/extends';
import { obj, string, func } from '@xstyled/util';

/* eslint-disable no-undef */
function useThemeBreakpoints(theme) {
  return getBreakpoints({
    theme: theme
  });
}
/**
 * Minimum breakpoint width.
 * Null for the smallest breakpoint.
 */

function useThemeMinValue(theme, key) {
  var breakpoints = useThemeBreakpoints(theme);
  var value = breakpoints[key];
  return value === 0 ? null : value;
}
/**
 * Maximum breakpoint width. Null for the largest (last) breakpoint.
 * The maximum value is calculated as the minimum of the next one less 0.02px
 * to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
 * See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
 * Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
 * See https://bugs.webkit.org/show_bug.cgi?id=178261
 */


function useThemeMaxValue(theme, key) {
  var breakpoints = useThemeBreakpoints(theme);
  var breakPoint = breakpoints[key];
  return breakPoint === 0 ? null : breakPoint - 0.02;
}

function useViewportWidth() {
  var _React$useState = React.useState(typeof window === 'undefined' ? null : window.innerWidth),
      width = _React$useState[0],
      setWidth = _React$useState[1];

  React.useEffect(function () {
    function handleResize() {
      setWidth(window.innerWidth);
    } // Add the listener, then setWidth to avoid race.


    window.addEventListener('resize', handleResize);
    setWidth(window.innerWidth);
    return function () {
      return window.removeEventListener('resize', handleResize);
    };
  }, []);
  return width;
}
function useThemeBreakpoint(theme) {
  var breakpoints = useThemeBreakpoints(theme);
  var width = useViewportWidth();
  return React.useMemo(function () {
    return Object.keys(breakpoints).reverse().find(function (breakpoint) {
      return width > breakpoints[breakpoint];
    }) || null;
  }, [breakpoints, width]);
}
function useThemeUp(theme, key) {
  var value = useThemeMinValue(theme, key);
  var width = useViewportWidth();
  return width >= value;
}
function useThemeDown(theme, key) {
  var value = useThemeMaxValue(theme, key);
  var width = useViewportWidth();
  return width < value;
}

function createBox() {
  return ["&&{", system, "}"];
}
createBox.meta = system.meta;

var getNumber = function getNumber(transform) {
  return function (value) {
    var num = Number(value);
    return transform(Number.isNaN(num) ? value : num);
  };
};

var SPACES = /\s+/;

var getMultiDimensions = function getMultiDimensions(transform) {
  return function (value) {
    var values = value.split(SPACES);
    return function (p) {
      return values.map(function (value) {
        return transform(value)(p);
      }).join(' ');
    };
  };
};

var COMMA = /\s*,\s*/;

var getMultiValues = function getMultiValues(transform) {
  return function (value) {
    var values = value.split(COMMA);
    return function (p) {
      return values.map(function (value) {
        return transform(value)(p);
      }).join(',');
    };
  };
};

var getNumberPx = /*#__PURE__*/getNumber(getPx);
var getNumberSpace = /*#__PURE__*/getNumber(getSpace);
var getMultiNumberSpace = /*#__PURE__*/getMultiDimensions(getNumberSpace);
var getNumberBorder = /*#__PURE__*/getNumber(getBorder);
var getNumberBorderWidth = /*#__PURE__*/getNumber(getBorderWidth);
var getMultiNumberBorderWidth = /*#__PURE__*/getMultiDimensions(getNumberBorderWidth);
var getNumberSize = /*#__PURE__*/getNumber(getSize);
var getMultiBorderStyle = /*#__PURE__*/getMultiDimensions(getBorderStyle);
var propGetters = {
  // getSpace
  margin: getMultiNumberSpace,
  'margin-top': getNumberSpace,
  'margin-bottom': getNumberSpace,
  'margin-left': getNumberSpace,
  'margin-right': getNumberSpace,
  padding: getMultiNumberSpace,
  'padding-top': getNumberSpace,
  'padding-bottom': getNumberSpace,
  'padding-left': getNumberSpace,
  'padding-right': getNumberSpace,
  'grid-gap': getMultiNumberSpace,
  'grid-row-gap': getNumberSpace,
  'grid-column-gap': getNumberSpace,
  // getColor
  color: getColor,
  'background-color': getColor,
  'border-color': getColor,
  'border-top-color': getColor,
  'border-right-color': getColor,
  'border-bottom-color': getColor,
  'border-left-color': getColor,
  'outline-color': getColor,
  fill: getColor,
  // getRadius
  'border-radius': /*#__PURE__*/getMultiDimensions( /*#__PURE__*/getNumber(getRadius)),
  'border-top-left-radius': /*#__PURE__*/getMultiDimensions( /*#__PURE__*/getNumber(getRadius)),
  'border-top-right-radius': /*#__PURE__*/getMultiDimensions( /*#__PURE__*/getNumber(getRadius)),
  'border-bottom-right-radius': /*#__PURE__*/getMultiDimensions( /*#__PURE__*/getNumber(getRadius)),
  'border-bottom-left-radius': /*#__PURE__*/getMultiDimensions( /*#__PURE__*/getNumber(getRadius)),
  // getBorder
  border: getNumberBorder,
  'border-top': getNumberBorder,
  'border-right': getNumberBorder,
  'border-bottom': getNumberBorder,
  'border-left': getNumberBorder,
  // getBorderWidth
  'border-width': getMultiNumberBorderWidth,
  'border-top-width': getNumberBorderWidth,
  'border-right-width': getNumberBorderWidth,
  'border-bottom-width': getNumberBorderWidth,
  'border-left-width': getNumberBorderWidth,
  'outline-width': getNumberBorderWidth,
  // getBorderStyle
  'border-style': getMultiBorderStyle,
  'border-top-style': getBorderStyle,
  'border-right-style': getBorderStyle,
  'border-bottom-style': getBorderStyle,
  'border-left-style': getBorderStyle,
  'outline-style': getBorderStyle,
  // getShadow
  'box-shadow': /*#__PURE__*/getMultiValues(getShadow),
  'text-shadow': /*#__PURE__*/getMultiValues(getShadow),
  // getSize
  width: getNumberSize,
  height: getNumberSize,
  'max-width': getNumberSize,
  'max-height': getNumberSize,
  'min-width': getNumberSize,
  'min-height': getNumberSize,
  // getZIndex
  'z-index': /*#__PURE__*/getNumber(getZIndex),
  // getFont
  'font-family': getFont,
  // getFontSize
  'font-size': /*#__PURE__*/getNumber(getFontSize),
  // getLineHeight
  'line-height': /*#__PURE__*/getNumber(getLineHeight),
  // getFontWeight
  'font-weight': getFontWeight,
  // getLetterSpacing
  'letter-spacing': /*#__PURE__*/getNumber(getLetterSpacing),
  // getTransition
  transition: getTransition,
  // getPx
  top: getNumberPx,
  right: getNumberPx,
  bottom: getNumberPx,
  left: getNumberPx
};

/* eslint-disable no-continue, no-loop-func, no-cond-assign */
var PROP_REGEXP = /(\s*)([^&{}:;\n]+):\s*([^&{}:;\n]+)(\s*);/g;
var IMPORTANT_REGEXP = /\s*!important\s*/;
function transform(rawValue) {
  if (typeof rawValue !== 'string') return rawValue;
  var matches;
  var lastIndex = 0;
  var values = [];

  var _loop = function _loop() {
    var _matches = matches,
        start = _matches[1],
        prop = _matches[2],
        propValue = _matches[3],
        end = _matches[4];
    var getter = propGetters[prop];

    if (getter) {
      var hasImportant = IMPORTANT_REGEXP.test(propValue);
      var cleanValue = propValue.replace(IMPORTANT_REGEXP, '');
      values.push(rawValue.slice(lastIndex, matches.index));
      values.push(function (p) {
        return "" + start + prop + ": " + getter(cleanValue)(p) + (hasImportant ? ' !important' : '') + ";" + end;
      });
      lastIndex = matches.index + matches[0].length;
    }
  };

  while (matches = PROP_REGEXP.exec(rawValue)) {
    _loop();
  }

  values.push(rawValue.slice(lastIndex, rawValue.length));
  return values;
}

/* eslint-disable no-underscore-dangle */

var join = function join() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args.filter(Boolean).join('.');
};

var toVarName = function toVarName(key) {
  return "--" + key.replace(/\./g, '-');
};

var toVarValue = function toVarValue(key, value) {
  return "var(" + toVarName(key) + ", " + value + ")";
};

function toCustomPropertiesReferences(object, parent, theme) {
  if (theme === void 0) {
    theme = object;
  }

  var next = Array.isArray(object) ? [] : {};

  for (var key in object) {
    var value = object[key];
    var name = join(parent, key);

    if (obj(value)) {
      next[key] = toCustomPropertiesReferences(value, name, theme);
      continue;
    }

    if (string(value)) {
      next[key] = toVarValue(name, value);
      continue;
    }

    if (func(value)) {
      next[key] = toVarValue(name, value({
        theme: theme
      }));
      continue;
    }
  }

  return next;
}
function toCustomPropertiesDeclarations(object, parent, theme, state) {
  if (theme === void 0) {
    theme = object;
  }

  if (state === void 0) {
    state = {
      value: ''
    };
  }

  for (var key in object) {
    var value = object[key];
    var name = join(parent, key);

    if (obj(value)) {
      toCustomPropertiesDeclarations(value, name, theme, state);
      continue;
    }

    if (string(value)) {
      state.value += toVarName(name) + ": " + value + ";";
      continue;
    }

    if (func(value)) {
      state.value += toVarName(name) + ": " + value({
        theme: theme
      }) + ";";
      continue;
    }
  }

  return state.value;
}

var STORAGE_KEY = 'xstyled-color-mode';

var isLocalStorageAvailable = typeof window !== 'undefined' && /*#__PURE__*/function () {
  try {
    var STORAGE_TEST_KEY = STORAGE_KEY + "-test";
    window.localStorage.setItem(STORAGE_TEST_KEY, STORAGE_TEST_KEY);
    window.localStorage.removeItem(STORAGE_TEST_KEY);
    return true;
  } catch (err) {
    return false;
  }
}();

var storage = isLocalStorageAvailable ? {
  get: function get() {
    return window.localStorage.getItem(STORAGE_KEY);
  },
  set: function set(value) {
    return window.localStorage.setItem(STORAGE_KEY, value);
  },
  clear: function clear() {
    return window.localStorage.removeItem(STORAGE_KEY);
  }
} : {
  get: function get() {
    return null;
  },
  set: function set() {},
  clear: function clear() {}
};
var COLOR_MODE_CLASS_PREFIX = 'xstyled-color-mode-';

var getColorModeClassName = function getColorModeClassName(mode) {
  return "" + COLOR_MODE_CLASS_PREFIX + mode;
};

var XSTYLED_COLORS_PREFIX = 'xstyled-colors';
var SYSTEM_MODES = ['light', 'dark'];

function getModeTheme(theme, mode) {
  return _extends({}, theme, {
    colors: _extends({}, theme.colors, theme.colors.modes[mode])
  });
}

var getMediaQuery = function getMediaQuery(query) {
  return "@media " + query;
};

var getColorModeQuery = function getColorModeQuery(mode) {
  return "(prefers-color-scheme: " + mode + ")";
};

function hasColorModes(theme) {
  return theme && theme.colors && theme.colors.modes;
}

function hasCustomPropertiesEnabled(theme) {
  return theme && (theme.useCustomProperties === undefined || theme.useCustomProperties);
}

function hasMediaQueryEnabled(theme) {
  return theme && (theme.useColorSchemeMediaQuery === undefined || theme.useColorSchemeMediaQuery);
}

function getInitialColorModeName(theme) {
  return theme.initialColorModeName || 'default';
}

function getDefaultColorModeName(theme) {
  return theme.defaultColorModeName || getInitialColorModeName(theme);
}

function createColorStyles(theme, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$targetSelector = _ref.targetSelector,
      targetSelector = _ref$targetSelector === void 0 ? 'body' : _ref$targetSelector;

  if (!hasColorModes(theme)) return null;

  var _theme$colors = theme.colors,
      modes = _theme$colors.modes,
      colors = _objectWithoutPropertiesLoose(_theme$colors, ["modes"]);

  var styles = toCustomPropertiesDeclarations(colors, XSTYLED_COLORS_PREFIX, theme);

  function getModePropertiesDeclarations(mode) {
    var modeTheme = getModeTheme(theme, mode);

    var _modeTheme$colors = modeTheme.colors,
        modes = _modeTheme$colors.modes,
        colors = _objectWithoutPropertiesLoose(_modeTheme$colors, ["modes"]);

    return toCustomPropertiesDeclarations(_extends({}, colors, modes[mode]), XSTYLED_COLORS_PREFIX, modeTheme);
  }

  if (theme.useColorSchemeMediaQuery !== false) {
    SYSTEM_MODES.forEach(function (mode) {
      if (modes[mode]) {
        var mediaQuery = getMediaQuery(getColorModeQuery(mode));
        styles += mediaQuery + "{" + getModePropertiesDeclarations(mode) + "}";
      }
    });
  }

  var initialModeName = getInitialColorModeName(theme);
  [initialModeName].concat(Object.keys(modes)).forEach(function (mode) {
    var key = "&." + getColorModeClassName(mode);
    styles += key + "{" + getModePropertiesDeclarations(mode) + "}";
  });
  return targetSelector + "{" + styles + "}";
}

function getSystemModeMql(mode) {
  if (typeof window === 'undefined' || window.matchMedia === undefined) {
    return null;
  }

  var query = getColorModeQuery(mode);
  return window.matchMedia(query);
}

function useSystemMode(theme) {
  var configs = React.useMemo(function () {
    if (!hasMediaQueryEnabled(theme)) return [];
    return SYSTEM_MODES.map(function (mode) {
      if (!theme.colors.modes[mode]) return null;
      var mql = getSystemModeMql(mode);
      return mql ? {
        mode: mode,
        mql: mql
      } : null;
    }).filter(Boolean);
  }, [theme]);

  var _React$useState = React.useState(function () {
    var config = configs.find(function (config) {
      return config.mql.matches;
    });
    return config ? config.mode : null;
  }),
      systemMode = _React$useState[0],
      setSystemMode = _React$useState[1];

  React.useEffect(function () {
    var cleans = configs.filter(function (_ref2) {
      var mql = _ref2.mql;
      return mql.addListener && mql.removeListener;
    }).map(function (_ref3) {
      var mode = _ref3.mode,
          mql = _ref3.mql;

      var handler = function handler(_ref4) {
        var matches = _ref4.matches;

        if (matches) {
          setSystemMode(mode);
        } else {
          setSystemMode(function (previousMode) {
            return previousMode === mode ? null : mode;
          });
        }
      };

      mql.addListener(handler);
      return function () {
        return mql.removeListener(handler);
      };
    });
    return function () {
      return cleans.forEach(function (clean) {
        return clean();
      });
    };
  });
  return systemMode;
}

var useIsomorphicLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;
function useColorModeState(theme, _temp2) {
  var _ref5 = _temp2 === void 0 ? {} : _temp2,
      target = _ref5.target;

  var systemMode = useSystemMode(theme);
  var defaultColorMode = getDefaultColorModeName(theme);
  var initialColorMode = getInitialColorModeName(theme);

  var _React$useState2 = React.useState(function () {
    if (!hasColorModes(theme)) return null;
    return defaultColorMode;
  }),
      mode = _React$useState2[0],
      setMode = _React$useState2[1]; // Add mode className


  var customPropertiesEnabled = hasCustomPropertiesEnabled(theme);
  var manualSetRef = React.useRef(false);
  var manuallySetMode = React.useCallback(function (value) {
    manualSetRef.current = true;
    setMode(value);
  }, []); // Set initial color mode in lazy

  useIsomorphicLayoutEffect(function () {
    if (!hasColorModes(theme)) return;
    var storedMode = storage.get();
    var initialMode = storedMode || systemMode || defaultColorMode;

    if (mode !== initialMode) {
      setMode(storedMode || systemMode || defaultColorMode);
    }
  }, []); // Store mode preference

  useIsomorphicLayoutEffect(function () {
    if (manualSetRef.current) {
      storage.set(mode);
    }
  }, [mode]); // Sync system mode

  useIsomorphicLayoutEffect(function () {
    var storedMode = storage.get();
    if (storedMode) return;
    var targetMode = systemMode || defaultColorMode;
    if (targetMode === mode) return;
    setMode(targetMode);
  }, [mode, systemMode, defaultColorMode]); // Add and remove class names

  useIsomorphicLayoutEffect(function () {
    if (!customPropertiesEnabled) return undefined;
    var stored = storage.get();
    var initial = initialColorMode !== mode;
    if (!stored && !initial) return undefined;
    var className = getColorModeClassName(mode);
    var usedTarget = target || document.body;
    usedTarget.classList.add(className);
    return function () {
      usedTarget.classList.remove(className);
    };
  }, [customPropertiesEnabled, target, mode, initialColorMode]);
  return [mode, manuallySetMode];
}
function useColorModeTheme(theme, mode) {
  var customPropertiesTheme = React.useMemo(function () {
    if (!hasCustomPropertiesEnabled(theme)) return null;
    if (!hasColorModes(theme)) return theme;

    var _theme$colors2 = theme.colors,
        modes = _theme$colors2.modes,
        colors = _objectWithoutPropertiesLoose(_theme$colors2, ["modes"]);

    return _extends({}, theme, {
      colors: _extends({}, toCustomPropertiesReferences(colors, XSTYLED_COLORS_PREFIX, theme), {
        modes: modes
      }),
      __rawColors: theme.colors
    });
  }, [theme]);
  var swapModeTheme = React.useMemo(function () {
    if (hasCustomPropertiesEnabled(theme)) return null;
    if (!hasColorModes(theme)) return theme;

    if (mode === getInitialColorModeName(theme)) {
      return _extends({}, theme, {
        __colorMode: mode
      });
    }

    return _extends({}, theme, {
      colors: _extends({}, theme.colors, theme.colors.modes[mode]),
      __colorMode: mode,
      __rawColors: theme.colors
    });
  }, [theme, mode]);
  return customPropertiesTheme || swapModeTheme;
}
var ColorModeContext = /*#__PURE__*/React.createContext();
function useColorMode() {
  var colorModeState = React.useContext(ColorModeContext);

  if (!colorModeState) {
    throw new Error("[useColorMode] requires the ColorModeProvider component");
  }

  return colorModeState;
}
function createColorModeProvider(_ref6) {
  var ThemeContext = _ref6.ThemeContext,
      ThemeProvider = _ref6.ThemeProvider,
      ColorModeStyle = _ref6.ColorModeStyle;

  function ColorModeProvider(_ref7) {
    var children = _ref7.children,
        target = _ref7.target,
        targetSelector = _ref7.targetSelector;
    var theme = React.useContext(ThemeContext);

    if (!theme) {
      throw new Error('[ColorModeProvider] requires ThemeProvider upper in the tree');
    }

    var colorState = useColorModeState(theme, {
      target: target
    });
    var colorModeTheme = useColorModeTheme(theme, colorState[0]);
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ColorModeStyle, {
      targetSelector: targetSelector
    }), /*#__PURE__*/React.createElement(ThemeProvider, {
      theme: colorModeTheme
    }, /*#__PURE__*/React.createElement(ColorModeContext.Provider, {
      value: colorState
    }, children)));
  }

  return ColorModeProvider;
}

function getInitScript(_temp3) {
  var _ref8 = _temp3 === void 0 ? {} : _temp3,
      _ref8$target = _ref8.target,
      target = _ref8$target === void 0 ? 'document.body' : _ref8$target;

  return "(function() { try {\n    var mode = localStorage.getItem('" + STORAGE_KEY + "');\n    if (mode) " + target + ".classList.add('" + COLOR_MODE_CLASS_PREFIX + "' + mode);\n  } catch (e) {} })();";
}

function getColorModeInitScriptElement(options) {
  return /*#__PURE__*/React.createElement("script", {
    key: "xstyled-color-mode-init",
    dangerouslySetInnerHTML: {
      __html: getInitScript(options)
    }
  });
}
function getColorModeInitScriptTag(options) {
  return "<script>" + getInitScript(options) + "</script>";
}

export { ColorModeContext, createBox, createColorModeProvider, createColorStyles, getColorModeInitScriptElement, getColorModeInitScriptTag, propGetters, transform, useColorMode, useColorModeState, useColorModeTheme, useThemeBreakpoint, useThemeBreakpoints, useThemeDown, useThemeUp, useViewportWidth };
