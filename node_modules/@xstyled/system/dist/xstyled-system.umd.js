(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@xstyled/util')) :
  typeof define === 'function' && define.amd ? define(['exports', '@xstyled/util'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.xstyledSystem = {}, global.util));
}(this, (function (exports, util) { 'use strict';

  var round = function round(value) {
    return Math.round(value * Math.pow(10, 4)) / Math.pow(10, 4);
  };

  var unit = function unit(_unit) {
    return function (value) {
      return util.num(value) && value !== 0 ? "" + value + _unit : value;
    };
  };
  var px = /*#__PURE__*/unit('px');

  var pxToRem = function pxToRem(value) {
    return round(value / 16);
  };

  var remPx = function remPx(value) {
    return util.num(value) && value !== 0 ? pxToRem(value) + "rem" : value;
  };
  var rpx = function rpx(value) {
    if (!util.string(value) || value.length < 4) return value;
    var unit = value.slice(-3);
    if (unit !== 'rpx') return value;
    var n = Number(value.slice(0, value.length - 3));
    if (n === 0) return 0;
    return pxToRem(n) + "rem";
  };
  var percent = function percent(n) {
    return n !== 0 && n >= -1 && n <= 1 ? round(n * 100) + "%" : n;
  };

  var DEFAULT_BREAKPOINTS = {
    xs: 0,
    sm: 576,
    md: 768,
    lg: 992,
    xl: 1200
  };
  function getBreakpoints(props) {
    var themeBreakpoints = util.getThemeValue(props, 'breakpoints');
    if (util.is(themeBreakpoints)) return themeBreakpoints;
    return DEFAULT_BREAKPOINTS;
  }
  var mediaMinWidth = function mediaMinWidth(value) {
    return value ? "@media (min-width: " + value + ")" : null;
  };
  var mediaMaxWidth = function mediaMaxWidth(value) {
    return value ? "@media (max-width: " + value + ")" : null;
  };
  var mediaBetweenWidth = function mediaBetweenWidth(min, max) {
    return "@media (min-width: " + min + ") and (max-width: " + max + ")";
  };
  /**
   * Minimum breakpoint width.
   * Null for the smallest breakpoint.
   */

  var getBreakpointMin = function getBreakpointMin(breakpoints, key) {
    var value = breakpoints[key];
    return value === 0 ? null : px(value);
  };
  /**
   * Maximum breakpoint width. Null for the largest (last) breakpoint.
   * The maximum value is calculated as the minimum of the next one less 0.02px
   * to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
   * See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
   * Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
   * See https://bugs.webkit.org/show_bug.cgi?id=178261
   */

  var getBreakpointMax = function getBreakpointMax(breakpoints, key) {
    var breakPoint = breakpoints[key];
    return breakPoint === 0 ? null : px(breakPoint - 0.02);
  };

  /* eslint-disable no-continue, no-underscore-dangle, no-restricted-syntax, guard-for-in, no-multi-assign */
  var cacheSupported = typeof Map !== 'undefined' && typeof WeakMap !== 'undefined';
  var caches = cacheSupported ? /*#__PURE__*/new WeakMap() : null;

  function getThemeCache(theme) {
    if (caches.has(theme)) return caches.get(theme);
    var cache = {};
    caches.set(theme, cache);
    return cache;
  }

  var noopCache = {
    has: function has() {
      return false;
    },
    set: function set() {},
    get: function get() {}
  };

  function getCacheNamespace(theme, namespace) {
    if (!cacheSupported || !theme) return noopCache;
    var cache = getThemeCache(theme);
    cache[namespace] = cache[namespace] || new Map();
    return cache[namespace];
  }

  var themeGetterId = 0;
  var themeGetter = function themeGetter(_ref) {
    var name = _ref.name,
        defaultTransform = _ref.transform,
        key = _ref.key,
        defaultVariants = _ref.defaultVariants,
        compose = _ref.compose;
    var id = themeGetterId++;

    var getter = function getter(value) {
      return function (props) {
        var res = value;
        if (!util.string(value) && !util.num(value)) return res;
        var cache = getCacheNamespace(props.theme, "__themeGetter" + id);
        if (cache.has(value)) return cache.get(value);
        var variants = util.is(key) ? util.getThemeValue(props, key) : null;
        variants = util.is(variants) ? variants : defaultVariants;
        res = util.is(variants) ? util.getThemeValue(props, value, variants) : null;
        res = util.is(res) ? res : value;
        var transform = (name && props.theme && props.theme.transformers ? props.theme.transformers[name] : null) || defaultTransform;

        if (transform) {
          res = transform(res, {
            rawValue: value,
            variants: variants,
            props: props
          });
        }

        res = compose ? compose(res)(props) : res;
        cache.set(value, res);
        return res;
      };
    };

    getter.meta = {
      name: name,
      transform: defaultTransform
    };
    return getter;
  };

  function styleFromValue(cssProperties, value, props, themeGet, cache) {
    if (util.obj(value)) return null;
    if (cache.has(value)) return cache.get(value);
    var computedValue = themeGet(value)(props);
    if (!util.string(computedValue) && !util.num(computedValue)) return null;
    var style = {};

    for (var key in cssProperties) {
      style[cssProperties[key]] = computedValue;
    }

    cache.set(value, style);
    return style;
  }

  function createStyleGenerator(getStyle, props, generators) {
    getStyle.meta = {
      props: props,
      getStyle: getStyle,
      generators: generators
    };
    return getStyle;
  }

  function getMedias(props) {
    var breakpoints = getBreakpoints(props);
    var medias = {};

    for (var breakpoint in breakpoints) {
      medias[breakpoint] = mediaMinWidth(getBreakpointMin(breakpoints, breakpoint));
    }

    return medias;
  }

  function getCachedMedias(props, cache) {
    if (cache.has('_medias')) {
      return cache.get('_medias');
    }

    var medias = getMedias(props);
    cache.set('_medias', medias);
    return medias;
  }

  function reduceBreakpoints(props, values, getStyle, cache) {
    if (getStyle === void 0) {
      getStyle = util.identity;
    }

    var medias = cache ? getCachedMedias(props, cache) : getMedias(props);
    var styles = {};

    for (var breakpoint in values) {
      var _style = getStyle(values[breakpoint]);

      if (_style === null) continue;
      var media = medias[breakpoint];

      if (media === null) {
        styles = util.merge(styles, _style);
      } else {
        styles[media] = styles[media] ? util.assign(styles[media], _style) : _style;
      }
    }

    return styles;
  }

  function getStyleFactory(prop, cssProperties, themeGet) {
    return function getStyle(props) {
      var value = props[prop];
      if (!util.is(value)) return null;
      var cache = getCacheNamespace(props.theme, prop);

      if (util.obj(value)) {
        return reduceBreakpoints(props, value, function (breakpointValue) {
          return styleFromValue(cssProperties, breakpointValue, props, themeGet, cache);
        }, cache);
      }

      return styleFromValue(cssProperties, value, props, themeGet, cache);
    };
  }

  function indexGeneratorsByProp(styles) {
    var index = {};

    for (var i = 0; i < styles.length; i++) {
      var _style2 = styles[i];

      if (_style2 && _style2.meta) {
        var propsKeys = Object.keys(_style2.meta.props);

        for (var j = 0; j < propsKeys.length; j++) {
          var prop = _style2.meta.props[propsKeys[j]];
          index[prop] = _style2;
        }
      }
    }

    return index;
  }

  function getMediaOrder(styles, props) {
    var medias = {};
    var breakpoints = getBreakpoints(props);
    var stylesProperties = Object.keys(styles);

    for (var key in breakpoints) {
      var breakpoint = breakpoints[key];
      var currentMediaKey = "@media (min-width: " + breakpoint + "px)";
      var isValid = stylesProperties.includes(currentMediaKey);
      if (!isValid) continue;
      medias[currentMediaKey] = styles[currentMediaKey];
    }

    return medias;
  }

  function compose() {
    var flatGenerators = [];

    for (var _len = arguments.length, generators = new Array(_len), _key = 0; _key < _len; _key++) {
      generators[_key] = arguments[_key];
    }

    generators.forEach(function (gen) {
      util.warn(gen, "Undefined generator in \"compose\" method");
      if (!gen) return;

      if (gen.meta.generators) {
        flatGenerators = [].concat(flatGenerators, gen.meta.generators);
      } else {
        flatGenerators.push(gen);
      }
    });
    var generatorsByProp = indexGeneratorsByProp(flatGenerators);

    function getStyle(props) {
      var styles = {};

      for (var key in props) {
        var generator = generatorsByProp[key];

        if (generator) {
          var _style3 = generator.meta.getStyle(props);

          util.merge(styles, _style3);
        }
      }

      return util.assign(getMediaOrder(styles, props), styles);
    }

    var props = flatGenerators.reduce(function (keys, generator) {
      return [].concat(keys, generator.meta.props);
    }, []);
    return createStyleGenerator(getStyle, props, generators);
  }
  function style(_ref2) {
    var prop = _ref2.prop,
        cssProperty = _ref2.cssProperty,
        _ref2$key = _ref2.key,
        key = _ref2$key === void 0 ? null : _ref2$key,
        _ref2$transform = _ref2.transform,
        transform = _ref2$transform === void 0 ? null : _ref2$transform,
        _ref2$themeGet = _ref2.themeGet,
        themeGet = _ref2$themeGet === void 0 ? null : _ref2$themeGet;
    var cssProperties = !Array.isArray(cssProperty) ? [cssProperty || prop] : cssProperty;

    if (Array.isArray(prop)) {
      return compose.apply(void 0, prop.map(function (prop) {
        return style({
          prop: prop,
          cssProperty: cssProperties,
          key: key,
          transform: transform,
          themeGet: themeGet
        });
      }));
    }

    themeGet = themeGet || themeGetter({
      key: key,
      transform: transform
    });
    var getStyle = getStyleFactory(prop, cssProperties, themeGet);
    return createStyleGenerator(getStyle, [prop]);
  }

  var getColor = /*#__PURE__*/themeGetter({
    name: 'color',
    key: 'colors'
  });
  var getPx = /*#__PURE__*/themeGetter({
    name: 'px',
    transform: function transform(value) {
      return px(rpx(value));
    }
  });
  var getPercent = /*#__PURE__*/themeGetter({
    name: 'percent',
    transform: percent,
    compose: getPx
  });
  var getRadius = /*#__PURE__*/themeGetter({
    name: 'radius',
    key: 'radii',
    compose: getPx
  });
  var getTransition = /*#__PURE__*/themeGetter({
    name: 'transition',
    key: 'transitions'
  }); // Style

  var opacity = /*#__PURE__*/style({
    prop: 'opacity'
  });
  var overflow = /*#__PURE__*/style({
    prop: 'overflow'
  });
  var transition = /*#__PURE__*/style({
    prop: 'transition',
    themeGet: getTransition
  });
  var basics = /*#__PURE__*/compose(opacity, overflow, transition);

  var background = /*#__PURE__*/style({
    prop: 'background'
  });
  var backgroundColor = /*#__PURE__*/style({
    prop: ['backgroundColor', 'bg'],
    cssProperty: 'backgroundColor',
    themeGet: getColor
  });
  var backgroundImage = /*#__PURE__*/style({
    prop: 'backgroundImage'
  });
  var backgroundSize = /*#__PURE__*/style({
    prop: 'backgroundSize'
  });
  var backgroundPosition = /*#__PURE__*/style({
    prop: 'backgroundPosition'
  });
  var backgroundRepeat = /*#__PURE__*/style({
    prop: 'backgroundRepeat'
  });
  var backgrounds = /*#__PURE__*/compose(background, backgroundColor, backgroundImage, backgroundSize, backgroundPosition, backgroundRepeat);

  var getBorder = /*#__PURE__*/themeGetter({
    name: 'border',
    key: 'borders',
    transform: function transform(n) {
      return util.num(n) && n > 0 ? px(n) + " solid" : n;
    }
  });
  var getBorderWidth = /*#__PURE__*/themeGetter({
    name: 'borderWidth',
    key: 'borderWidths',
    compose: getPx
  });
  var getBorderStyle = /*#__PURE__*/themeGetter({
    name: 'borderStyle',
    key: 'borderStyles'
  }); // Style

  var border = /*#__PURE__*/style({
    prop: 'border',
    themeGet: getBorder
  });
  var borderTop = /*#__PURE__*/style({
    prop: 'borderTop',
    themeGet: getBorder
  });
  var borderTopColor = /*#__PURE__*/style({
    prop: 'borderTopColor',
    themeGet: getColor
  });
  var borderRight = /*#__PURE__*/style({
    prop: 'borderRight',
    themeGet: getBorder
  });
  var borderRightColor = /*#__PURE__*/style({
    prop: 'borderRightColor',
    themeGet: getColor
  });
  var borderBottom = /*#__PURE__*/style({
    prop: 'borderBottom',
    themeGet: getBorder
  });
  var borderBottomColor = /*#__PURE__*/style({
    prop: 'borderBottomColor',
    themeGet: getColor
  });
  var borderLeft = /*#__PURE__*/style({
    prop: 'borderLeft',
    themeGet: getBorder
  });
  var borderLeftColor = /*#__PURE__*/style({
    prop: 'borderLeftColor',
    themeGet: getColor
  });
  var borderColor = /*#__PURE__*/style({
    prop: 'borderColor',
    themeGet: getColor
  });
  var borderWidth = /*#__PURE__*/style({
    prop: 'borderWidth',
    themeGet: getBorderWidth
  });
  var borderStyle = /*#__PURE__*/style({
    prop: 'borderStyle',
    themeGet: getBorderStyle
  });
  var borderRadius = /*#__PURE__*/style({
    prop: 'borderRadius',
    themeGet: getRadius
  });
  var borders = /*#__PURE__*/compose(border, borderTop, borderTopColor, borderRight, borderRightColor, borderBottom, borderBottomColor, borderLeft, borderLeftColor, borderColor, borderWidth, borderStyle, borderRadius);

  var getSize = /*#__PURE__*/themeGetter({
    name: 'size',
    key: 'sizes',
    compose: getPercent
  }); // Styles

  var display = /*#__PURE__*/style({
    prop: 'display'
  });
  var width = /*#__PURE__*/style({
    prop: 'width',
    themeGet: getSize
  });
  var height = /*#__PURE__*/style({
    prop: 'height',
    themeGet: getSize
  });
  var maxWidth = /*#__PURE__*/style({
    prop: 'maxWidth',
    themeGet: getSize
  });
  var maxHeight = /*#__PURE__*/style({
    prop: 'maxHeight',
    themeGet: getSize
  });
  var minWidth = /*#__PURE__*/style({
    prop: 'minWidth',
    themeGet: getSize
  });
  var minHeight = /*#__PURE__*/style({
    prop: 'minHeight',
    themeGet: getSize
  });
  var size = /*#__PURE__*/style({
    prop: 'size',
    cssProperty: ['width', 'height'],
    themeGet: getSize
  });
  var verticalAlign = /*#__PURE__*/style({
    prop: 'verticalAlign'
  });
  var layout = /*#__PURE__*/compose(display, width, height, maxWidth, maxHeight, minWidth, minHeight, size, verticalAlign);

  var alignItems = /*#__PURE__*/style({
    prop: 'alignItems'
  });
  var alignContent = /*#__PURE__*/style({
    prop: 'alignContent'
  });
  var justifyContent = /*#__PURE__*/style({
    prop: 'justifyContent'
  });
  var justifyItems = /*#__PURE__*/style({
    prop: 'justifyItems'
  });
  var flexWrap = /*#__PURE__*/style({
    prop: 'flexWrap'
  });
  var flexGrow = /*#__PURE__*/style({
    prop: 'flexGrow'
  });
  var flexShrink = /*#__PURE__*/style({
    prop: 'flexShrink'
  });
  var flexBasis = /*#__PURE__*/style({
    prop: 'flexBasis',
    themeGet: getPercent
  });
  var flexDirection = /*#__PURE__*/style({
    prop: 'flexDirection'
  });
  var flex = /*#__PURE__*/style({
    prop: 'flex'
  });
  var justifySelf = /*#__PURE__*/style({
    prop: 'justifySelf'
  });
  var alignSelf = /*#__PURE__*/style({
    prop: 'alignSelf'
  });
  var order = /*#__PURE__*/style({
    prop: 'order'
  });
  var flexboxes = /*#__PURE__*/compose(display, alignItems, alignContent, justifyContent, justifyItems, flexWrap, flexBasis, flexShrink, flexGrow, flexDirection, flex, justifySelf, alignSelf, order);

  function toNegative(value) {
    if (util.string(value)) return "-" + value;
    return value * -1;
  } // Getters


  var getSpace = /*#__PURE__*/themeGetter({
    name: 'space',
    key: 'space',
    defaultVariants: [0, 4, 8, 16, 24, 48, 96, 144, 192, 240],
    compose: getPx,
    transform: function transform(_, _ref) {
      var rawValue = _ref.rawValue,
          variants = _ref.variants,
          props = _ref.props;

      if (util.string(rawValue)) {
        var _neg = rawValue.startsWith('-');

        var absoluteValue = _neg ? rawValue.substr(1) : rawValue;
        var variantValue = util.getThemeValue(props, absoluteValue, variants);

        var _value = util.is(variantValue) ? variantValue : absoluteValue;

        return _neg ? toNegative(_value) : _value;
      }

      var abs = Math.abs(rawValue);
      var neg = util.negative(rawValue);
      var value = util.is(variants[abs]) ? variants[abs] : abs;
      return neg ? toNegative(value) : value;
    }
  }); // Styles

  var margin = /*#__PURE__*/style({
    prop: ['margin', 'm'],
    cssProperty: 'margin',
    themeGet: getSpace
  });
  var marginTop = /*#__PURE__*/style({
    prop: ['marginTop', 'mt'],
    cssProperty: 'marginTop',
    themeGet: getSpace
  });
  var marginRight = /*#__PURE__*/style({
    prop: ['marginRight', 'mr'],
    cssProperty: 'marginRight',
    themeGet: getSpace
  });
  var marginBottom = /*#__PURE__*/style({
    prop: ['marginBottom', 'mb'],
    cssProperty: 'marginBottom',
    themeGet: getSpace
  });
  var marginLeft = /*#__PURE__*/style({
    prop: ['marginLeft', 'ml'],
    cssProperty: 'marginLeft',
    themeGet: getSpace
  });
  var mx = /*#__PURE__*/style({
    prop: 'mx',
    cssProperty: ['marginRight', 'marginLeft'],
    themeGet: getSpace
  });
  var my = /*#__PURE__*/style({
    prop: 'my',
    cssProperty: ['marginTop', 'marginBottom'],
    themeGet: getSpace
  });
  var padding = /*#__PURE__*/style({
    prop: ['padding', 'p'],
    cssProperty: 'padding',
    themeGet: getSpace
  });
  var paddingTop = /*#__PURE__*/style({
    prop: ['paddingTop', 'pt'],
    cssProperty: 'paddingTop',
    themeGet: getSpace
  });
  var paddingRight = /*#__PURE__*/style({
    prop: ['paddingRight', 'pr'],
    cssProperty: 'paddingRight',
    themeGet: getSpace
  });
  var paddingBottom = /*#__PURE__*/style({
    prop: ['paddingBottom', 'pb'],
    cssProperty: 'paddingBottom',
    themeGet: getSpace
  });
  var paddingLeft = /*#__PURE__*/style({
    prop: ['paddingLeft', 'pl'],
    cssProperty: 'paddingLeft',
    themeGet: getSpace
  });
  var px$1 = /*#__PURE__*/style({
    prop: 'px',
    cssProperty: ['paddingRight', 'paddingLeft'],
    themeGet: getSpace
  });
  var py = /*#__PURE__*/style({
    prop: 'py',
    cssProperty: ['paddingTop', 'paddingBottom'],
    themeGet: getSpace
  });
  var space = /*#__PURE__*/compose(margin, marginTop, marginRight, marginBottom, marginLeft, mx, my, padding, paddingTop, paddingRight, paddingBottom, paddingLeft, px$1, py);

  var gridGap = /*#__PURE__*/style({
    prop: 'gridGap',
    themeGet: getSpace
  });
  var gridColumnGap = /*#__PURE__*/style({
    prop: 'gridColumnGap',
    themeGet: getSpace
  });
  var gridRowGap = /*#__PURE__*/style({
    prop: 'gridRowGap',
    themeGet: getSpace
  });
  var gridColumn = /*#__PURE__*/style({
    prop: 'gridColumn'
  });
  var gridRow = /*#__PURE__*/style({
    prop: 'gridRow'
  });
  var gridAutoFlow = /*#__PURE__*/style({
    prop: 'gridAutoFlow'
  });
  var gridAutoColumns = /*#__PURE__*/style({
    prop: 'gridAutoColumns'
  });
  var gridAutoRows = /*#__PURE__*/style({
    prop: 'gridAutoRows'
  });
  var gridTemplateColumns = /*#__PURE__*/style({
    prop: 'gridTemplateColumns'
  });
  var gridTemplateRows = /*#__PURE__*/style({
    prop: 'gridTemplateRows'
  });
  var gridTemplateAreas = /*#__PURE__*/style({
    prop: 'gridTemplateAreas'
  });
  var gridArea = /*#__PURE__*/style({
    prop: 'gridArea'
  });
  var grids = /*#__PURE__*/compose(gridGap, gridColumnGap, gridRowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

  var getZIndex = /*#__PURE__*/themeGetter({
    name: 'zIndex',
    key: 'zIndices'
  }); // Styles

  var position = /*#__PURE__*/style({
    prop: 'position'
  });
  var zIndex = /*#__PURE__*/style({
    prop: 'zIndex',
    themeGet: getZIndex
  });
  var top = /*#__PURE__*/style({
    prop: 'top',
    themeGet: getPx
  });
  var right = /*#__PURE__*/style({
    prop: 'right',
    themeGet: getPx
  });
  var bottom = /*#__PURE__*/style({
    prop: 'bottom',
    themeGet: getPx
  });
  var left = /*#__PURE__*/style({
    prop: 'left',
    themeGet: getPx
  });
  var positioning = /*#__PURE__*/compose(position, zIndex, top, right, bottom, left);

  var getShadow = /*#__PURE__*/themeGetter({
    name: 'shadow',
    key: 'shadows'
  }); // Style

  var boxShadow = /*#__PURE__*/style({
    prop: 'boxShadow',
    themeGet: getShadow
  });
  var textShadow = /*#__PURE__*/style({
    prop: 'textShadow',
    themeGet: getShadow
  });
  var shadows = /*#__PURE__*/compose(boxShadow, textShadow);

  var getFont = /*#__PURE__*/themeGetter({
    name: 'font',
    key: 'fonts'
  });
  var getLineHeight = /*#__PURE__*/themeGetter({
    name: 'lineHeight',
    key: 'lineHeights',
    transform: rpx
  });
  var getFontWeight = /*#__PURE__*/themeGetter({
    name: 'fontWeight',
    key: 'fontWeights'
  });
  var getLetterSpacing = /*#__PURE__*/themeGetter({
    name: 'letterSpacing',
    key: 'letterSpacings',
    compose: getPx
  }); // Styles

  var fontFamily = /*#__PURE__*/style({
    prop: 'fontFamily',
    themeGet: getFont
  });
  var getFontSize = /*#__PURE__*/themeGetter({
    name: 'fontSize',
    key: 'fontSizes',
    defaultVariants: [0, 12, 14, 16, 20, 24, 32, 48, 64, 72],
    compose: getPx
  });
  var fontSize = /*#__PURE__*/style({
    prop: 'fontSize',
    themeGet: getFontSize
  });
  var lineHeight = /*#__PURE__*/style({
    prop: 'lineHeight',
    themeGet: getLineHeight
  });
  var fontWeight = /*#__PURE__*/style({
    prop: 'fontWeight',
    themeGet: getFontWeight
  });
  var fontStyle = /*#__PURE__*/style({
    prop: 'fontStyle'
  });
  var textAlign = /*#__PURE__*/style({
    prop: 'textAlign'
  });
  var letterSpacing = /*#__PURE__*/style({
    prop: 'letterSpacing',
    themeGet: getLetterSpacing
  });
  var color = /*#__PURE__*/style({
    prop: 'color',
    themeGet: getColor
  });
  var textTransform = /*#__PURE__*/style({
    prop: 'textTransform'
  });
  var typography = /*#__PURE__*/compose(fontFamily, fontSize, fontStyle, lineHeight, fontWeight, textAlign, letterSpacing, color, textTransform);

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var _extends_1 = createCommonjsModule(function (module) {
  function _extends() {
    module.exports = _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  module.exports = _extends;
  });

  var row = /*#__PURE__*/createStyleGenerator(function () {
    return {
      boxSizing: 'border-box',
      flexGrow: 1,
      flexWrap: 'wrap',
      display: 'flex'
    };
  }, ['row']);

  function getColStyle(props, size) {
    if (size === true) {
      return {
        flexBasis: 0,
        flexGrow: 1,
        maxWidth: '100%'
      };
    }

    if (size === 'auto') {
      return {
        flex: "0 0 auto",
        maxWidth: 'none',
        width: 'auto'
      };
    }

    var sizeWidth = getPercent(size)(props);
    return {
      flex: "0 0 " + sizeWidth,
      maxWidth: sizeWidth
    };
  }

  var col = /*#__PURE__*/createStyleGenerator(function (props) {
    var value = props.col;
    var common = {
      boxSizing: 'border-box',
      flexBasis: 0,
      flexGrow: 1,
      maxWidth: '100%'
    };

    if (util.obj(value)) {
      var breakpointsStyle = reduceBreakpoints(props, value, function (breakpointValue) {
        return getColStyle(props, breakpointValue);
      });
      return _extends_1({}, common, breakpointsStyle);
    }

    return _extends_1({}, common, getColStyle(props, value));
  }, ['col']);
  var xgrids = /*#__PURE__*/compose(row, col);

  var system = /*#__PURE__*/compose(backgrounds, basics, borders, flexboxes, grids, layout, positioning, shadows, space, typography, xgrids);

  var th = function th(path) {
    return function (props) {
      var value = util.getThemeValue(props, path);
      util.warn(util.is(value), "value \"" + path + "\" not found in theme");
      return value;
    };
  };
  [getColor, getPx, getPercent, getRadius, getBorder, getBorderWidth, getBorderStyle, getShadow, getSize, getZIndex, getSpace, getFont, getFontSize, getLineHeight, getFontWeight, getLetterSpacing, getTransition].forEach(function (themeGetter) {
    th[themeGetter.meta.name] = themeGetter;
  });

  var variant = function variant(_ref) {
    var _ref$key = _ref.key,
        key = _ref$key === void 0 ? null : _ref$key,
        defaultValue = _ref["default"],
        _ref$variants = _ref.variants,
        variants = _ref$variants === void 0 ? {} : _ref$variants,
        _ref$prop = _ref.prop,
        prop = _ref$prop === void 0 ? 'variant' : _ref$prop;
    return function (props) {
      var themeVariants = util.is(key) ? util.getThemeValue(props, key) : null;
      var computedVariants = util.merge(util.assign({}, variants), themeVariants);
      var value = props[prop] !== undefined ? props[prop] : defaultValue;
      var result = util.getThemeValue(props, value, computedVariants);
      util.warn(util.is(result), "variant \"" + value + "\" not found");
      return result;
    };
  };

  var up = function up(key, rules) {
    return function (props) {
      var breakpoints = getBreakpoints(props);
      var value = getBreakpointMin(breakpoints, key);
      if (value === null) return rules;
      return [mediaMinWidth(value) + " {", rules, '}'];
    };
  };
  var down = function down(key, rules) {
    return function (props) {
      var breakpoints = getBreakpoints(props);
      var value = getBreakpointMax(breakpoints, key);
      if (value === null) return null;
      return [mediaMaxWidth(value) + " {", rules, '}'];
    };
  };
  var between = function between(lower, upper, rules) {
    return function (props) {
      var breakpoints = getBreakpoints(props);
      var min = getBreakpointMin(breakpoints, lower);
      var max = getBreakpointMax(breakpoints, upper);
      if (max === null) return up(lower, rules)(props);
      if (min === null) return down(upper, rules)(props);
      return [mediaBetweenWidth(min, max) + " {", rules, '}'];
    };
  };
  var breakpoints = function breakpoints(values) {
    return function (props) {
      var allRules = [];
      var keys = Object.keys(values);
      var keysLength = keys.length;

      for (var i = 0; i < keysLength; i++) {
        var key = keys[i];
        var rules = values[key];
        var result = up(key, rules)(props);

        if (Array.isArray(result)) {
          result.forEach(function (v) {
            return allRules.push(v);
          });
        } else {
          allRules.push(result);
        }
      }

      return allRules;
    };
  };

  var rpxTransformers = {
    px: function px(value) {
      return remPx(rpx(value));
    },
    border: function border(n) {
      return util.num(n) && n > 0 ? remPx(n) + " solid" : n;
    }
  };

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

  var createSystemComponent = function createSystemComponent(_ref, defaultComponent, system$1) {
    var createElement = _ref.createElement,
        forwardRef = _ref.forwardRef;

    if (defaultComponent === void 0) {
      defaultComponent = 'div';
    }

    if (system$1 === void 0) {
      system$1 = system;
    }

    var SystemComponent = forwardRef(function SystemComponent(_ref2, ref) {
      var as = _ref2.as,
          props = objectWithoutPropertiesLoose(_ref2, ["as"]);

      var omittedProps = util.omit(props, system$1.meta.props);
      var Component = as || defaultComponent;
      return createElement(Component, _extends_1({
        ref: ref
      }, omittedProps));
    });
    SystemComponent.displayName = 'SystemComponent';
    return SystemComponent;
  };

  exports.alignContent = alignContent;
  exports.alignItems = alignItems;
  exports.alignSelf = alignSelf;
  exports.background = background;
  exports.backgroundColor = backgroundColor;
  exports.backgroundImage = backgroundImage;
  exports.backgroundPosition = backgroundPosition;
  exports.backgroundRepeat = backgroundRepeat;
  exports.backgroundSize = backgroundSize;
  exports.backgrounds = backgrounds;
  exports.basics = basics;
  exports.between = between;
  exports.border = border;
  exports.borderBottom = borderBottom;
  exports.borderBottomColor = borderBottomColor;
  exports.borderColor = borderColor;
  exports.borderLeft = borderLeft;
  exports.borderLeftColor = borderLeftColor;
  exports.borderRadius = borderRadius;
  exports.borderRight = borderRight;
  exports.borderRightColor = borderRightColor;
  exports.borderStyle = borderStyle;
  exports.borderTop = borderTop;
  exports.borderTopColor = borderTopColor;
  exports.borderWidth = borderWidth;
  exports.borders = borders;
  exports.bottom = bottom;
  exports.boxShadow = boxShadow;
  exports.breakpoints = breakpoints;
  exports.col = col;
  exports.color = color;
  exports.compose = compose;
  exports.createStyleGenerator = createStyleGenerator;
  exports.createSystemComponent = createSystemComponent;
  exports.display = display;
  exports.down = down;
  exports.flex = flex;
  exports.flexBasis = flexBasis;
  exports.flexDirection = flexDirection;
  exports.flexGrow = flexGrow;
  exports.flexShrink = flexShrink;
  exports.flexWrap = flexWrap;
  exports.flexboxes = flexboxes;
  exports.fontFamily = fontFamily;
  exports.fontSize = fontSize;
  exports.fontStyle = fontStyle;
  exports.fontWeight = fontWeight;
  exports.getBorder = getBorder;
  exports.getBorderStyle = getBorderStyle;
  exports.getBorderWidth = getBorderWidth;
  exports.getBreakpoints = getBreakpoints;
  exports.getColor = getColor;
  exports.getFont = getFont;
  exports.getFontSize = getFontSize;
  exports.getFontWeight = getFontWeight;
  exports.getLetterSpacing = getLetterSpacing;
  exports.getLineHeight = getLineHeight;
  exports.getPercent = getPercent;
  exports.getPx = getPx;
  exports.getRadius = getRadius;
  exports.getShadow = getShadow;
  exports.getSize = getSize;
  exports.getSpace = getSpace;
  exports.getTransition = getTransition;
  exports.getZIndex = getZIndex;
  exports.gridArea = gridArea;
  exports.gridAutoColumns = gridAutoColumns;
  exports.gridAutoFlow = gridAutoFlow;
  exports.gridAutoRows = gridAutoRows;
  exports.gridColumn = gridColumn;
  exports.gridColumnGap = gridColumnGap;
  exports.gridGap = gridGap;
  exports.gridRow = gridRow;
  exports.gridRowGap = gridRowGap;
  exports.gridTemplateAreas = gridTemplateAreas;
  exports.gridTemplateColumns = gridTemplateColumns;
  exports.gridTemplateRows = gridTemplateRows;
  exports.grids = grids;
  exports.height = height;
  exports.justifyContent = justifyContent;
  exports.justifyItems = justifyItems;
  exports.justifySelf = justifySelf;
  exports.layout = layout;
  exports.left = left;
  exports.letterSpacing = letterSpacing;
  exports.lineHeight = lineHeight;
  exports.margin = margin;
  exports.marginBottom = marginBottom;
  exports.marginLeft = marginLeft;
  exports.marginRight = marginRight;
  exports.marginTop = marginTop;
  exports.maxHeight = maxHeight;
  exports.maxWidth = maxWidth;
  exports.minHeight = minHeight;
  exports.minWidth = minWidth;
  exports.mx = mx;
  exports.my = my;
  exports.opacity = opacity;
  exports.order = order;
  exports.overflow = overflow;
  exports.padding = padding;
  exports.paddingBottom = paddingBottom;
  exports.paddingLeft = paddingLeft;
  exports.paddingRight = paddingRight;
  exports.paddingTop = paddingTop;
  exports.position = position;
  exports.positioning = positioning;
  exports.px = px$1;
  exports.py = py;
  exports.reduceBreakpoints = reduceBreakpoints;
  exports.right = right;
  exports.row = row;
  exports.rpxTransformers = rpxTransformers;
  exports.shadows = shadows;
  exports.size = size;
  exports.space = space;
  exports.style = style;
  exports.system = system;
  exports.textAlign = textAlign;
  exports.textShadow = textShadow;
  exports.textTransform = textTransform;
  exports.th = th;
  exports.themeGetter = themeGetter;
  exports.top = top;
  exports.transition = transition;
  exports.typography = typography;
  exports.up = up;
  exports.variant = variant;
  exports.verticalAlign = verticalAlign;
  exports.width = width;
  exports.xgrids = xgrids;
  exports.zIndex = zIndex;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
