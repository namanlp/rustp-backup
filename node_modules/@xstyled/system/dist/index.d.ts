import * as _xstyled_util from '@xstyled/util';
import { Props, ITheme } from '@xstyled/util';
export { ITheme, Props } from '@xstyled/util';
import * as CSS from 'csstype';

declare type CSSProperties = CSS.Properties<string | number>;
declare type CSSPseudos = {
    [K in CSS.Pseudos]?: CSSObject;
};
declare type CSSScalar = undefined | string | number;
interface CSSObject extends CSSProperties, CSSPseudos {
    [key: string]: CSSObject | CSSScalar;
}
declare type CSSFromProps<TProps = {}> = (props: TProps) => CSSObject | null | undefined;
declare type Mixin = (value: any) => CSSFromProps | CSSObject | null | undefined;
declare type ThemeAlias = (props: Props<Theme>) => ThemeValue;
declare type ThemeValue = undefined | null | string | string[] | number | number[] | ThemeAlias | ThemeNamespace;
interface States {
    [key: string]: string | null;
}
interface Screens {
    [key: string]: number;
    [key: number]: number;
}
declare type Variants = States & Screens;
interface Colors {
    [key: string]: string | Colors;
    [key: number]: string | Colors;
}
interface Transformers {
    [key: string]: TransformValue;
}
interface ThemeNamespace {
    [key: string]: ThemeValue;
    [key: number]: ThemeValue;
}
interface Theme extends ITheme {
}
declare type NamespaceType<T> = T extends ReadonlyArray<unknown> ? number : T extends Array<unknown> ? number : T extends {
    default: ThemeValue;
} ? keyof T | true : T extends ThemeNamespace ? keyof T : {};
declare type ThemeScreens<T extends ITheme> = T extends {
    screens: Screens;
} ? T['screens'] : unknown;
declare type ThemeStates<T extends ITheme> = T extends {
    states: States;
} ? T['states'] : unknown;
declare type ThemeVariants<T extends ITheme> = ThemeScreens<T> & Omit<ThemeStates<T>, '_'>;
declare type ThemeProp<TType, TTheme extends ITheme> = {
    [P in keyof ThemeVariants<TTheme>]?: TType | ThemeProp<TType, TTheme>;
};
declare type SystemProp<TType, TTheme extends ITheme> = TType | ThemeProp<TType, TTheme>;
declare type CSSOption = string | string[] | Mixin;
interface StyleOptions {
    prop: string | string[] | readonly string[];
    css?: CSSOption;
    cssProps?: string[];
    themeGet?: ThemeGetter;
    key?: string;
    transform?: TransformValue;
}
interface StyleGenerator<TProps = {}> {
    (props: Props<Theme> & TProps, sort?: boolean): CSSObject | null;
    meta: {
        props: string[];
        cssGetters: {
            [key: string]: ThemeGetter;
        };
        getStyle: StyleGenerator<TProps>;
        generators?: StyleGenerator[];
    };
    apply: (values: TProps) => CSSFromProps<Props<Theme> & TProps>;
}
interface TransformValue {
    (value: any, options: {
        rawValue: unknown;
        variants: ThemeNamespace | null;
        props: Props<Theme>;
    }): CSSScalar;
}
declare type ThemeNamespaceValue<K extends string, T extends ITheme> = NamespaceType<T[K]> | {};
interface ThemeGetter<T = any> {
    (value: T, defaultValue?: CSSScalar): (props: Props<Theme>) => CSSScalar;
    meta: {
        name?: string;
        transform?: TransformValue;
    };
}
declare type ThemeGetterType<T extends ThemeGetter> = T extends ThemeGetter<infer T> ? T : never;
declare type StyleGeneratorProps<T> = T extends StyleGenerator<infer Props> ? Props : never;
declare type StyleGeneratorPropsConcat<T> = T extends [infer Head, ...infer Tail] ? StyleGeneratorProps<Head> & StyleGeneratorPropsConcat<Tail> : unknown;

declare const themeGetter: <T = any>({ name, transform: defaultTransform, key, compose, shorthand, multiple, }: {
    name?: string | undefined;
    key?: string | undefined;
    transform?: TransformValue | undefined;
    compose?: ThemeGetter<any> | undefined;
    shorthand?: boolean | undefined;
    multiple?: boolean | undefined;
}) => ThemeGetter<T>;
declare const createStyleGenerator: <TProps = {}>({ getStyle, props, cssGetters, generators, }: {
    getStyle: CSSFromProps<Props<Theme> & TProps>;
    props: string[];
    cssGetters?: {
        [key: string]: ThemeGetter<any>;
    } | undefined;
    generators?: StyleGenerator<{}>[] | undefined;
}) => StyleGenerator<TProps>;
declare function compose<TProps = {}>(...generators: StyleGenerator[]): StyleGenerator<TProps>;
declare function compose<T extends StyleGenerator[]>(...generators: T): StyleGenerator<StyleGeneratorPropsConcat<T>>;
declare const style: <TProps = {}>({ prop, css, themeGet, key, transform, cssProps: cssPropsOption, }: StyleOptions) => StyleGenerator<TProps>;

declare type Pixel = number | string;
declare const getPx: ThemeGetter<Pixel>;
declare type ThemeDuration<T extends ITheme = Theme> = ThemeNamespaceValue<'durations', T>;
declare type Duration<T extends ITheme = Theme> = ThemeDuration<T> | number | string;
declare const getDuration: ThemeGetter<Duration<Theme>>;
declare type Angle = number | string;
declare const getAngle: ThemeGetter<Angle>;
declare type Percent = number | string;
declare const getPercent: ThemeGetter<Percent>;

declare type ThemeTransition<T extends ITheme = Theme> = ThemeNamespaceValue<'transitions', T>;
declare const getTransition: ThemeGetter<ThemeTransition<Theme>>;
declare type ThemeTransitionProperty<T extends ITheme = Theme> = ThemeNamespaceValue<'transitionProperties', T>;
declare const getTransitionProperty: ThemeGetter<ThemeTransitionProperty<Theme>>;
declare type ThemeTimingFunction<T extends ITheme = Theme> = ThemeNamespaceValue<'timingFunctions', T>;
declare const getTimingFunction: ThemeGetter<ThemeTimingFunction<Theme>>;
interface TransitionProps<T extends ITheme = Theme> {
    transition?: SystemProp<ThemeTransition<T> | CSS.Property.Transition, T>;
}
declare const transition: StyleGenerator<TransitionProps<Theme>>;
interface TransitionPropertyProps<T extends ITheme = Theme> {
    transitionProperty?: SystemProp<ThemeTransitionProperty<T> | CSS.Property.TransitionProperty, T>;
}
declare const transitionProperty: StyleGenerator<TransitionPropertyProps<Theme>>;
interface TransitionDurationProps<T extends ITheme = Theme> {
    transitionDuration?: SystemProp<Duration<T> | CSS.Property.TransitionDuration, T>;
}
declare const transitionDuration: StyleGenerator<TransitionDurationProps<Theme>>;
interface TransitionTimingFunctionProps<T extends ITheme = Theme> {
    transitionTimingFunction?: SystemProp<ThemeTimingFunction<T> | CSS.Property.TransitionTimingFunction, T>;
}
declare const transitionTimingFunction: StyleGenerator<TransitionTimingFunctionProps<Theme>>;
interface TransitionDelayProps<T extends ITheme = Theme> {
    transitionDelay?: SystemProp<Duration<T> | CSS.Property.TransitionDelay, T>;
}
declare const transitionDelay: StyleGenerator<TransitionDelayProps<Theme>>;
interface TransitionsProps<T extends ITheme = Theme> extends TransitionProps<T>, TransitionPropertyProps<T>, TransitionDurationProps<T>, TransitionTimingFunctionProps<T>, TransitionDelayProps<T> {
}
declare const transitions: StyleGenerator<TransitionsProps<Theme>>;

declare type ThemeAnimation<T extends ITheme = Theme> = ThemeNamespaceValue<'animations', T>;
declare const getAnimation: ThemeGetter<ThemeAnimation<Theme>>;
interface AnimationProps<T extends ITheme = Theme> {
    animation?: SystemProp<ThemeAnimation<T> | CSS.Property.Animation, T>;
}
declare const animation: StyleGenerator<AnimationProps<Theme>>;
interface AnimationDurationProps<T extends ITheme = Theme> {
    animationDuration?: SystemProp<Duration<T> | CSS.Property.AnimationDuration, T>;
}
declare const animationDuration: StyleGenerator<AnimationDurationProps<Theme>>;
interface AnimationTimingFunctionProps<T extends ITheme = Theme> {
    animationTimingFunction?: SystemProp<ThemeTimingFunction<T> | CSS.Property.AnimationTimingFunction, T>;
}
declare const animationTimingFunction: StyleGenerator<AnimationTimingFunctionProps<Theme>>;
interface AnimationsProps<T extends ITheme = Theme> extends AnimationProps<T>, AnimationDurationProps<T>, AnimationTimingFunctionProps<T> {
}
declare const animations: StyleGenerator<AnimationsProps<Theme>>;

declare type ThemeColor<T extends ITheme = Theme> = ThemeNamespaceValue<'colors', T>;
declare type Color<T extends ITheme = Theme> = ThemeColor<T> | CSS.Property.Color;
declare const getColor: ThemeGetter<ThemeColor<Theme>>;

interface BackgroundProps<T extends ITheme = Theme> {
    background?: SystemProp<CSS.Property.Background, T>;
}
declare const background: StyleGenerator<BackgroundProps<Theme>>;
declare type BackgroundColorProp<T extends ITheme> = SystemProp<ThemeColor<T> | CSS.Property.BackgroundColor, T>;
interface BackgroundColorProps<T extends ITheme = Theme> {
    backgroundColor?: BackgroundColorProp<T>;
    bg?: BackgroundColorProp<T>;
}
declare const backgroundColor: StyleGenerator<BackgroundColorProps<Theme>>;
interface BackgroundImageProps<T extends ITheme = Theme> {
    backgroundImage?: SystemProp<CSS.Property.BackgroundImage, T>;
}
declare const backgroundImage: StyleGenerator<BackgroundImageProps<Theme>>;
interface BackgroundSizeProps<T extends ITheme = Theme> {
    backgroundSize?: SystemProp<CSS.Property.BackgroundSize, T>;
}
declare const backgroundSize: StyleGenerator<BackgroundSizeProps<Theme>>;
interface BackgroundPositionProps<T extends ITheme = Theme> {
    backgroundPosition?: SystemProp<CSS.Property.BackgroundPosition, T>;
}
declare const backgroundPosition: StyleGenerator<BackgroundPositionProps<Theme>>;
interface BackgroundRepeatProps<T extends ITheme = Theme> {
    backgroundRepeat?: SystemProp<CSS.Property.BackgroundRepeat, T>;
}
declare const backgroundRepeat: StyleGenerator<BackgroundRepeatProps<Theme>>;
interface BackgroundAttachmentProps<T extends ITheme = Theme> {
    backgroundAttachment?: SystemProp<CSS.Property.BackgroundAttachment, T>;
}
declare const backgroundAttachment: StyleGenerator<BackgroundAttachmentProps<Theme>>;
interface BackgroundClipProps<T extends ITheme = Theme> {
    backgroundClip?: SystemProp<CSS.Property.BackgroundClip, T>;
}
declare const backgroundClip: StyleGenerator<BackgroundClipProps<Theme>>;
interface GradientFromProps<T extends ITheme = Theme> {
    gradientFrom?: SystemProp<Color<T>, T>;
}
declare const gradientFrom: StyleGenerator<GradientFromProps<Theme>>;
interface GradientViaProps<T extends ITheme = Theme> {
    gradientVia?: SystemProp<Color<T>, T>;
}
declare const gradientVia: StyleGenerator<GradientViaProps<Theme>>;
interface GradientToProps<T extends ITheme = Theme> {
    gradientTo?: SystemProp<Color<T>, T>;
}
declare const gradientTo: StyleGenerator<GradientToProps<Theme>>;
interface BackgroundsProps<T extends ITheme = Theme> extends BackgroundProps<T>, BackgroundColorProps<T>, BackgroundImageProps<T>, BackgroundSizeProps<T>, BackgroundPositionProps<T>, BackgroundRepeatProps<T>, BackgroundAttachmentProps<T>, BackgroundClipProps<T>, GradientFromProps<T>, GradientViaProps<T>, GradientToProps<T> {
}
declare const backgrounds: StyleGenerator<BackgroundsProps<Theme>>;

declare type ThemeBorder<T extends ITheme = Theme> = ThemeNamespaceValue<'borders', T>;
declare type BorderValue = number | string;
declare type Border<T extends ITheme = Theme> = BorderValue | ThemeBorder<T>;
declare const getBorder: ThemeGetter<ThemeBorder<Theme>>;
declare type ThemeBorderWidth<T extends ITheme = Theme> = ThemeNamespaceValue<'borderWidths', T>;
declare type BorderWidth<T extends ITheme = Theme> = Pixel | ThemeBorderWidth<T>;
declare const getBorderWidth: ThemeGetter<ThemeBorderWidth<Theme>>;
declare type ThemeBorderColor<T extends ITheme = Theme> = ThemeColor<T>;
declare const getBorderColor: ThemeGetter<ThemeBorderColor<Theme>>;
declare type ThemeBorderStyle<T extends ITheme = Theme> = ThemeNamespaceValue<'borderStyles', T>;
declare const getBorderStyle: ThemeGetter<ThemeBorderStyle<Theme>>;
interface BorderProps<T extends ITheme = Theme> {
    border?: SystemProp<Border<T> | CSS.Property.Border, T>;
}
declare const border: StyleGenerator<BorderProps<Theme>>;
interface BorderTopProps<T extends ITheme = Theme> {
    borderTop?: SystemProp<Border<T> | CSS.Property.BorderTop, T>;
}
declare const borderTop: StyleGenerator<BorderTopProps<Theme>>;
interface BorderRightProps<T extends ITheme = Theme> {
    borderRight?: SystemProp<Border<T> | CSS.Property.BorderRight, T>;
}
declare const borderRight: StyleGenerator<BorderRightProps<Theme>>;
interface BorderBottomProps<T extends ITheme = Theme> {
    borderBottom?: SystemProp<Border<T> | CSS.Property.BorderBottom, T>;
}
declare const borderBottom: StyleGenerator<BorderBottomProps<Theme>>;
interface BorderLeftProps<T extends ITheme = Theme> {
    borderLeft?: SystemProp<Border<T> | CSS.Property.BorderLeft, T>;
}
declare const borderLeft: StyleGenerator<BorderLeftProps<Theme>>;
interface BorderColorProps<T extends ITheme = Theme> {
    borderColor?: SystemProp<ThemeBorderColor<T> | CSS.Property.BorderColor, T>;
}
declare const borderColor: StyleGenerator<BorderColorProps<Theme>>;
interface BorderTopColorProps<T extends ITheme = Theme> {
    borderTopColor?: SystemProp<ThemeColor<T> | CSS.Property.BorderTopColor, T>;
}
declare const borderTopColor: StyleGenerator<BorderTopColorProps<Theme>>;
interface BorderRightColorProps<T extends ITheme = Theme> {
    borderRightColor?: SystemProp<ThemeColor<T> | CSS.Property.BorderRightColor, T>;
}
declare const borderRightColor: StyleGenerator<BorderRightColorProps<Theme>>;
interface BorderBottomColorProps<T extends ITheme = Theme> {
    borderBottomColor?: SystemProp<ThemeColor<T> | CSS.Property.BorderBottomColor, T>;
}
declare const borderBottomColor: StyleGenerator<BorderBottomColorProps<Theme>>;
interface BorderLeftColorProps<T extends ITheme = Theme> {
    borderLeftColor?: SystemProp<ThemeColor<T> | CSS.Property.BorderLeftColor, T>;
}
declare const borderLeftColor: StyleGenerator<BorderLeftColorProps<Theme>>;
interface BorderWidthProps<T extends ITheme = Theme> {
    borderWidth?: SystemProp<BorderWidth<T> | CSS.Property.BorderWidth, T>;
}
declare const borderWidth: StyleGenerator<BorderWidthProps<Theme>>;
interface BorderTopWidthProps<T extends ITheme = Theme> {
    borderTopWidth?: SystemProp<BorderWidth<T> | CSS.Property.BorderTopWidth, T>;
}
declare const borderTopWidth: StyleGenerator<BorderTopWidthProps<Theme>>;
interface BorderRightWidthProps<T extends ITheme = Theme> {
    borderRightWidth?: SystemProp<BorderWidth<T> | CSS.Property.BorderRightWidth, T>;
}
declare const borderRightWidth: StyleGenerator<BorderRightWidthProps<Theme>>;
interface BorderBottomWidthProps<T extends ITheme = Theme> {
    borderBottomWidth?: SystemProp<BorderWidth<T> | CSS.Property.BorderBottomWidth, T>;
}
declare const borderBottomWidth: StyleGenerator<BorderBottomWidthProps<Theme>>;
interface BorderLeftWidthProps<T extends ITheme = Theme> {
    borderLeftWidth?: SystemProp<BorderWidth<T> | CSS.Property.BorderLeftWidth, T>;
}
declare const borderLeftWidth: StyleGenerator<BorderLeftWidthProps<Theme>>;
interface BorderStyleProps<T extends ITheme = Theme> {
    borderStyle?: SystemProp<ThemeBorderStyle<T> | CSS.Property.BorderStyle, T>;
}
declare const borderStyle: StyleGenerator<BorderStyleProps<Theme>>;
interface BorderTopStyleProps<T extends ITheme = Theme> {
    borderTopStyle?: SystemProp<ThemeBorderStyle<T> | CSS.Property.BorderTopStyle, T>;
}
declare const borderTopStyle: StyleGenerator<BorderTopStyleProps<Theme>>;
interface BorderRightStyleProps<T extends ITheme = Theme> {
    borderRightStyle?: SystemProp<ThemeBorderStyle<T> | CSS.Property.BorderRightStyle, T>;
}
declare const borderRightStyle: StyleGenerator<BorderRightStyleProps<Theme>>;
interface BorderBottomStyleProps<T extends ITheme = Theme> {
    borderBottomStyle?: SystemProp<ThemeBorderStyle<T> | CSS.Property.BorderBottomStyle, T>;
}
declare const borderBottomStyle: StyleGenerator<BorderBottomStyleProps<Theme>>;
interface BorderLeftStyleProps<T extends ITheme = Theme> {
    borderLeftStyle?: SystemProp<ThemeBorderStyle<T> | CSS.Property.BorderLeftStyle, T>;
}
declare const borderLeftStyle: StyleGenerator<BorderLeftStyleProps<Theme>>;
interface OutlineProps<T extends ITheme = Theme> {
    outline?: SystemProp<Border<T> | CSS.Property.Outline, T>;
}
declare const outline: StyleGenerator<OutlineProps<Theme>>;
interface OutlineColorProps<T extends ITheme = Theme> {
    outlineColor?: SystemProp<ThemeBorderColor<T> | CSS.Property.OutlineColor, T>;
}
declare const outlineColor: StyleGenerator<OutlineColorProps<Theme>>;
interface OutlineWidthProps<T extends ITheme = Theme> {
    outlineWidth?: SystemProp<BorderWidth<T> | CSS.Property.OutlineWidth, T>;
}
declare const outlineWidth: StyleGenerator<OutlineWidthProps<Theme>>;
interface OutlineStyleProps<T extends ITheme = Theme> {
    outlineStyle?: SystemProp<ThemeBorderStyle<T> | CSS.Property.OutlineStyle, T>;
}
declare const outlineStyle: StyleGenerator<OutlineStyleProps<Theme>>;
interface OutlineOffsetProps<T extends ITheme = Theme> {
    outlineOffset?: SystemProp<BorderWidth<T> | CSS.Property.OutlineOffset, T>;
}
declare const outlineOffset: StyleGenerator<OutlineOffsetProps<Theme>>;
declare type ThemeRadius<T extends ITheme = Theme> = ThemeNamespaceValue<'radii', T>;
declare type Radius<T extends ITheme = Theme> = Pixel | ThemeRadius<T>;
declare const getRadius: ThemeGetter<ThemeRadius<Theme>>;
interface BorderRadiusProps<T extends ITheme = Theme> {
    borderRadius?: SystemProp<Radius<T> | CSS.Property.BorderRadius, T>;
}
declare const borderRadius: StyleGenerator<BorderRadiusProps<Theme>>;
interface DivideYProps<T extends ITheme = Theme> {
    divideY?: SystemProp<BorderWidth<T> | true, T>;
}
declare const divideY: StyleGenerator<DivideYProps<Theme>>;
interface DivideXProps<T extends ITheme = Theme> {
    divideX?: SystemProp<BorderWidth<T> | true, T>;
}
declare const divideX: StyleGenerator<DivideXProps<Theme>>;
interface DivideXReverseProps<T extends ITheme = Theme> {
    divideXReverse?: SystemProp<true, T>;
}
declare const divideXReverse: StyleGenerator<DivideXReverseProps<Theme>>;
interface DivideYReverseProps<T extends ITheme = Theme> {
    divideYReverse?: SystemProp<true, T>;
}
declare const divideYReverse: StyleGenerator<DivideYReverseProps<Theme>>;
interface DivideColorProps<T extends ITheme = Theme> {
    divideColor?: SystemProp<ThemeColor<T> | CSS.Property.BorderColor, T>;
}
declare const divideColor: StyleGenerator<DivideColorProps<Theme>>;
interface DivideStyleProps<T extends ITheme = Theme> {
    divideStyle?: SystemProp<ThemeBorderStyle<T> | CSS.Property.BorderStyle, T>;
}
declare const divideStyle: StyleGenerator<DivideStyleProps<Theme>>;
declare type ThemeRingWidth<T extends ITheme = Theme> = ThemeNamespaceValue<'ringWidths', T>;
declare type RingWidth<T extends ITheme = Theme> = Pixel | ThemeRingWidth<T>;
declare const getRingWidth: ThemeGetter<ThemeRingWidth<Theme>>;
interface RingProps<T extends ITheme = Theme> {
    ring?: SystemProp<RingWidth<T>, T>;
}
declare const ring: StyleGenerator<RingProps<Theme>>;
interface RingInsetProps<T extends ITheme = Theme> {
    ringInset?: SystemProp<true, T>;
}
declare const ringInset: StyleGenerator<RingInsetProps<Theme>>;
interface RingColorProps<T extends ITheme = Theme> {
    ringColor?: SystemProp<Color<T>, T>;
}
declare const ringColor: StyleGenerator<RingColorProps<Theme>>;
interface BordersProps<T extends ITheme = Theme> extends BorderProps<T>, BorderTopProps<T>, BorderRightProps<T>, BorderBottomProps<T>, BorderLeftProps<T>, BorderColorProps<T>, BorderTopColorProps<T>, BorderRightColorProps<T>, BorderBottomColorProps<T>, BorderLeftColorProps<T>, BorderWidthProps<T>, BorderTopWidthProps<T>, BorderRightWidthProps<T>, BorderBottomWidthProps<T>, BorderLeftWidthProps<T>, BorderStyleProps<T>, BorderTopStyleProps<T>, BorderRightStyleProps<T>, BorderBottomStyleProps<T>, BorderLeftStyleProps<T>, BorderRadiusProps<T>, OutlineProps<T>, OutlineColorProps<T>, OutlineWidthProps<T>, OutlineStyleProps<T>, OutlineOffsetProps<T>, DivideXProps<T>, DivideYProps<T>, DivideXReverseProps<T>, DivideYReverseProps<T>, DivideColorProps<T>, DivideStyleProps<T>, RingProps<T>, RingInsetProps<T>, RingColorProps<T> {
}
declare const borders: StyleGenerator<BordersProps<Theme>>;

declare type ThemeShadow<T extends ITheme = Theme> = ThemeNamespaceValue<'shadows', T>;
declare const getShadow: ThemeGetter<ThemeShadow<Theme>>;
interface OpacityProps<T extends ITheme = Theme> {
    opacity?: SystemProp<CSS.Property.Opacity, T>;
}
declare const opacity: StyleGenerator<OpacityProps<Theme>>;
interface BoxShadowProps<T extends ITheme = Theme> {
    boxShadow?: SystemProp<ThemeShadow<T> | CSS.Property.BoxShadow, T>;
}
declare const boxShadow: StyleGenerator<BoxShadowProps<Theme>>;
interface TextShadowProps<T extends ITheme = Theme> {
    textShadow?: SystemProp<ThemeShadow<T> | CSS.Property.TextShadow, T>;
}
declare const textShadow: StyleGenerator<TextShadowProps<Theme>>;
interface EffectsProps<T extends ITheme = Theme> extends OpacityProps<T>, BoxShadowProps<T>, TextShadowProps<T> {
}
declare const effects: StyleGenerator<EffectsProps<Theme>>;

interface RowProps<T extends ITheme = Theme> {
    row?: SystemProp<true, T>;
}
declare const row: StyleGenerator<RowProps<Theme>>;
interface ColProps<T extends ITheme = Theme> {
    col?: SystemProp<true | 'auto' | string | number, T>;
}
declare const col: StyleGenerator<ColProps<Theme>>;
interface FlexboxGridsProps<T extends ITheme = Theme> extends RowProps<T>, ColProps<T> {
}
declare const flexboxGrids: StyleGenerator<FlexboxGridsProps<Theme>>;

interface DisplayProps<T extends ITheme = Theme> {
    display?: SystemProp<CSS.Property.Display, T>;
}
declare const display: StyleGenerator<DisplayProps<Theme>>;
interface FloatProps<T extends ITheme = Theme> {
    float?: SystemProp<CSS.Property.Float, T>;
}
declare const float: StyleGenerator<FloatProps<Theme>>;
interface BoxSizingProps<T extends ITheme = Theme> {
    boxSizing?: SystemProp<CSS.Property.BoxSizing, T>;
}
declare const boxSizing: StyleGenerator<BoxSizingProps<Theme>>;
interface ContainerProps<T extends ITheme = Theme> {
    container?: SystemProp<true, T>;
}
declare const container: StyleGenerator<ContainerProps<Theme>>;
interface OverflowProps<T extends ITheme = Theme> {
    overflow?: SystemProp<CSS.Property.Overflow, T>;
}
declare const overflow: StyleGenerator<OverflowProps<Theme>>;
interface OverflowXProps<T extends ITheme = Theme> {
    overflowX?: SystemProp<CSS.Property.OverflowX, T>;
}
declare const overflowX: StyleGenerator<OverflowXProps<Theme>>;
interface OverflowYProps<T extends ITheme = Theme> {
    overflowY?: SystemProp<CSS.Property.OverflowY, T>;
}
declare const overflowY: StyleGenerator<OverflowYProps<Theme>>;
declare type ThemeZIndex<T extends ITheme = Theme> = ThemeNamespaceValue<'zIndices', T>;
declare const getZIndex: ThemeGetter<ThemeZIndex<Theme>>;
interface ZIndexProps<T extends ITheme = Theme> {
    zIndex?: SystemProp<ThemeZIndex<T> | CSS.Property.ZIndex, T>;
}
declare const zIndex: StyleGenerator<ZIndexProps<Theme>>;
interface PositionProps<T extends ITheme = Theme> {
    position?: SystemProp<CSS.Property.Position, T>;
}
declare const position: StyleGenerator<PositionProps<Theme>>;
declare type ThemeInset<T extends ITheme = Theme> = ThemeNamespaceValue<'inset', T>;
declare type Inset<T extends ITheme = Theme> = Pixel | ThemeInset<T>;
declare const getInset: ThemeGetter<ThemeInset<Theme>>;
interface TopProps<T extends ITheme = Theme> {
    top?: SystemProp<Inset<T> | CSS.Property.Top, T>;
}
declare const top: StyleGenerator<TopProps<Theme>>;
interface RightProps<T extends ITheme = Theme> {
    right?: SystemProp<Inset<T> | CSS.Property.Right, T>;
}
declare const right: StyleGenerator<RightProps<Theme>>;
interface BottomProps<T extends ITheme = Theme> {
    bottom?: SystemProp<Inset<T> | CSS.Property.Bottom, T>;
}
declare const bottom: StyleGenerator<BottomProps<Theme>>;
interface LeftProps<T extends ITheme = Theme> {
    left?: SystemProp<Inset<T> | CSS.Property.Left, T>;
}
declare const left: StyleGenerator<LeftProps<Theme>>;
interface VisibilityProps<T extends ITheme = Theme> {
    visibility?: SystemProp<CSS.Property.Visibility, T>;
}
declare const visibility: StyleGenerator<VisibilityProps<Theme>>;
interface OverscrollBehaviorProps<T extends ITheme = Theme> {
    overscrollBehavior?: SystemProp<CSS.Property.OverscrollBehavior, T>;
}
declare const overscrollBehavior: StyleGenerator<OverscrollBehaviorProps<Theme>>;
interface ObjectFitProps<T extends ITheme = Theme> {
    objectFit?: SystemProp<CSS.Property.ObjectFit, T>;
}
declare const objectFit: StyleGenerator<ObjectFitProps<Theme>>;
interface LayoutProps<T extends ITheme = Theme> extends DisplayProps<T>, FloatProps<T>, BoxSizingProps<T>, ContainerProps<T>, OverflowProps<T>, OverflowXProps<T>, OverflowYProps<T>, PositionProps<T>, ZIndexProps<T>, TopProps<T>, RightProps<T>, BottomProps<T>, LeftProps<T>, VisibilityProps<T>, OverscrollBehaviorProps<T>, ObjectFitProps<T> {
}
declare const layout: StyleGenerator<LayoutProps<Theme>>;

interface AlignItemsProps<T extends ITheme = Theme> {
    alignItems?: SystemProp<CSS.Property.AlignItems, T>;
}
declare const alignItems: StyleGenerator<AlignItemsProps<Theme>>;
interface AlignContentProps<T extends ITheme = Theme> {
    alignContent?: SystemProp<CSS.Property.AlignContent, T>;
}
declare const alignContent: StyleGenerator<AlignContentProps<Theme>>;
interface JustifyContentProps<T extends ITheme = Theme> {
    justifyContent?: SystemProp<CSS.Property.JustifyContent, T>;
}
declare const justifyContent: StyleGenerator<JustifyContentProps<Theme>>;
interface JustifyItemsProps<T extends ITheme = Theme> {
    justifyItems?: SystemProp<CSS.Property.JustifyItems, T>;
}
declare const justifyItems: StyleGenerator<JustifyItemsProps<Theme>>;
interface FlexWrapProps<T extends ITheme = Theme> {
    flexWrap?: SystemProp<CSS.Property.FlexWrap, T>;
}
declare const flexWrap: StyleGenerator<FlexWrapProps<Theme>>;
interface FlexGrowProps<T extends ITheme = Theme> {
    flexGrow?: SystemProp<CSS.Property.FlexGrow, T>;
}
declare const flexGrow: StyleGenerator<FlexGrowProps<Theme>>;
interface FlexShrinkProps<T extends ITheme = Theme> {
    flexShrink?: SystemProp<CSS.Property.FlexShrink, T>;
}
declare const flexShrink: StyleGenerator<FlexShrinkProps<Theme>>;
interface FlexBasisProps<T extends ITheme = Theme> {
    flexBasis?: SystemProp<Percent | CSS.Property.FlexBasis, T>;
}
declare const flexBasis: StyleGenerator<FlexBasisProps<Theme>>;
interface FlexDirectionProps<T extends ITheme = Theme> {
    flexDirection?: SystemProp<CSS.Property.FlexDirection, T>;
}
declare const flexDirection: StyleGenerator<FlexDirectionProps<Theme>>;
interface FlexProps<T extends ITheme = Theme> {
    flex?: SystemProp<CSS.Property.Flex, T>;
}
declare const flex: StyleGenerator<FlexProps<Theme>>;
interface JustifySelfProps<T extends ITheme = Theme> {
    justifySelf?: SystemProp<CSS.Property.JustifySelf, T>;
}
declare const justifySelf: StyleGenerator<JustifySelfProps<Theme>>;
interface AlignSelfProps<T extends ITheme = Theme> {
    alignSelf?: SystemProp<CSS.Property.AlignSelf, T>;
}
declare const alignSelf: StyleGenerator<AlignSelfProps<Theme>>;
interface OrderProps<T extends ITheme = Theme> {
    order?: SystemProp<CSS.Property.Order, T>;
}
declare const order: StyleGenerator<OrderProps<Theme>>;
interface FlexboxesProps<T extends ITheme = Theme> extends DisplayProps<T>, AlignItemsProps<T>, AlignContentProps<T>, JustifyContentProps<T>, JustifyItemsProps<T>, FlexWrapProps<T>, FlexBasisProps<T>, FlexShrinkProps<T>, FlexGrowProps<T>, FlexDirectionProps<T>, FlexProps<T>, JustifySelfProps<T>, AlignSelfProps<T>, OrderProps<T> {
}
declare const flexboxes: StyleGenerator<FlexboxesProps<Theme>>;

declare type ThemeSpace<T extends ITheme = Theme> = ThemeNamespaceValue<'space', T>;
declare type Space<T extends ITheme = Theme> = Pixel | ThemeSpace<T>;
declare const getSpace: ThemeGetter<ThemeSpace<Theme>>;
declare type MarginProp<T extends ITheme> = SystemProp<Space<T> | CSS.Property.Margin, T>;
interface MarginProps<T extends ITheme = Theme> {
    margin?: MarginProp<T>;
    m?: MarginProp<T>;
}
declare const margin: StyleGenerator<{}>;
declare type MarginTopProp<T extends ITheme> = SystemProp<Space<T> | CSS.Property.MarginTop, T>;
interface MarginTopProps<T extends ITheme = Theme> {
    marginTop?: MarginTopProp<T>;
    mt?: MarginTopProp<T>;
}
declare const marginTop: StyleGenerator<MarginTopProps<Theme>>;
declare type MarginRightProp<T extends ITheme> = SystemProp<Space<T> | CSS.Property.MarginRight, T>;
interface MarginRightProps<T extends ITheme = Theme> {
    marginRight?: MarginRightProp<T>;
    mr?: MarginRightProp<T>;
}
declare const marginRight: StyleGenerator<MarginRightProps<Theme>>;
declare type MarginBottomProp<T extends ITheme> = SystemProp<Space<T> | CSS.Property.MarginBottom, T>;
interface MarginBottomProps<T extends ITheme = Theme> {
    marginBottom?: MarginBottomProp<T>;
    mb?: MarginBottomProp<T>;
}
declare const marginBottom: StyleGenerator<MarginBottomProps<Theme>>;
declare type MarginLeftProp<T extends ITheme> = SystemProp<Space<T> | CSS.Property.MarginLeft, T>;
interface MarginLeftProps<T extends ITheme = Theme> {
    marginLeft?: MarginLeftProp<T>;
    ml?: MarginLeftProp<T>;
}
declare const marginLeft: StyleGenerator<MarginLeftProps<Theme>>;
interface MarginXProps<T extends ITheme = Theme> {
    mx?: SystemProp<Space<T> | (CSS.Property.MarginLeft & CSS.Property.MarginRight), T>;
}
declare const mx: StyleGenerator<MarginXProps<Theme>>;
interface MarginYProps<T extends ITheme = Theme> {
    my?: SystemProp<Space<T> | (CSS.Property.MarginTop & CSS.Property.MarginBottom), T>;
}
declare const my: StyleGenerator<MarginYProps<Theme>>;
declare type PaddingProp<T extends ITheme> = SystemProp<Space<T> | CSS.Property.Padding, T>;
interface PaddingProps<T extends ITheme = Theme> {
    padding?: PaddingProp<T>;
    p?: PaddingProp<T>;
}
declare const padding: StyleGenerator<PaddingProps<Theme>>;
declare type PaddingTopProp<T extends ITheme> = SystemProp<Space<T> | CSS.Property.PaddingTop, T>;
interface PaddingTopProps<T extends ITheme = Theme> {
    paddingTop?: PaddingTopProp<T>;
    pt?: PaddingTopProp<T>;
}
declare const paddingTop: StyleGenerator<PaddingTopProps<Theme>>;
declare type PaddingRightProp<T extends ITheme> = SystemProp<Space<T> | CSS.Property.PaddingRight, T>;
interface PaddingRightProps<T extends ITheme = Theme> {
    paddingRight?: PaddingRightProp<T>;
    pr?: PaddingRightProp<T>;
}
declare const paddingRight: StyleGenerator<PaddingRightProps<Theme>>;
declare type PaddingBottomProp<T extends ITheme> = SystemProp<Space<T> | CSS.Property.PaddingBottom, T>;
interface PaddingBottomProps<T extends ITheme = Theme> {
    paddingBottom?: PaddingBottomProp<T>;
    pb?: PaddingBottomProp<T>;
}
declare const paddingBottom: StyleGenerator<PaddingBottomProps<Theme>>;
declare type PaddingLeftProp<T extends ITheme> = SystemProp<Space<T> | CSS.Property.PaddingLeft, T>;
interface PaddingLeftProps<T extends ITheme = Theme> {
    paddingLeft?: PaddingLeftProp<T>;
    pl?: PaddingLeftProp<T>;
}
declare const paddingLeft: StyleGenerator<PaddingLeftProps<Theme>>;
interface PaddingXProps<T extends ITheme = Theme> {
    px?: SystemProp<Space<T> | (CSS.Property.PaddingLeft & CSS.Property.PaddingRight), T>;
}
declare const px: StyleGenerator<PaddingXProps<Theme>>;
interface PaddingYProps<T extends ITheme = Theme> {
    py?: SystemProp<Space<T> | (CSS.Property.PaddingTop & CSS.Property.PaddingBottom), T>;
}
declare const py: StyleGenerator<PaddingYProps<Theme>>;
interface SpaceYProps<T extends ITheme = Theme> {
    spaceY?: SystemProp<Space<T>, T>;
}
declare const spaceY: StyleGenerator<SpaceYProps<Theme>>;
interface SpaceXProps<T extends ITheme = Theme> {
    spaceX?: SystemProp<Space<T>, T>;
}
declare const spaceX: StyleGenerator<SpaceXProps<Theme>>;
interface SpaceXReverseProps<T extends ITheme = Theme> {
    spaceXReverse?: SystemProp<true, T>;
}
declare const spaceXReverse: StyleGenerator<SpaceXReverseProps<Theme>>;
interface SpaceYReverseProps<T extends ITheme = Theme> {
    spaceYReverse?: SystemProp<true, T>;
}
declare const spaceYReverse: StyleGenerator<SpaceYReverseProps<Theme>>;
interface SpaceProps<T extends ITheme = Theme> extends MarginProps<T>, MarginTopProps<T>, MarginRightProps<T>, MarginBottomProps<T>, MarginLeftProps<T>, MarginXProps<T>, MarginYProps<T>, PaddingProps<T>, PaddingTopProps<T>, PaddingRightProps<T>, PaddingBottomProps<T>, PaddingLeftProps<T>, PaddingXProps<T>, PaddingYProps<T>, SpaceXProps<T>, SpaceYProps<T>, SpaceXReverseProps<T>, SpaceYReverseProps<T> {
}
declare const space: StyleGenerator<SpaceProps<Theme>>;

interface GapProps<T extends ITheme = Theme> {
    gap?: SystemProp<Space<T> | CSS.Property.Gap, T>;
}
declare const gap: StyleGenerator<GapProps<Theme>>;
interface ColumnGapProps<T extends ITheme = Theme> {
    columnGap?: SystemProp<Space<T> | CSS.Property.ColumnGap, T>;
}
declare const columnGap: StyleGenerator<ColumnGapProps<Theme>>;
interface RowGapProps<T extends ITheme = Theme> {
    rowGap?: SystemProp<Space<T> | CSS.Property.RowGap, T>;
}
declare const rowGap: StyleGenerator<RowGapProps<Theme>>;
interface GridColumnProps<T extends ITheme = Theme> {
    gridColumn?: SystemProp<CSS.Property.GridColumn, T>;
}
declare const gridColumn: StyleGenerator<GridColumnProps<Theme>>;
interface GridRowProps<T extends ITheme = Theme> {
    gridRow?: SystemProp<CSS.Property.GridRow, T>;
}
declare const gridRow: StyleGenerator<GridRowProps<Theme>>;
interface GridAutoFlowProps<T extends ITheme = Theme> {
    gridAutoFlow?: SystemProp<CSS.Property.GridAutoFlow, T>;
}
declare const gridAutoFlow: StyleGenerator<GridAutoFlowProps<Theme>>;
interface GridAutoColumnsProps<T extends ITheme = Theme> {
    gridAutoColumns?: SystemProp<CSS.Property.GridAutoColumns, T>;
}
declare const gridAutoColumns: StyleGenerator<GridAutoColumnsProps<Theme>>;
interface GridAutoRowsProps<T extends ITheme = Theme> {
    gridAutoRows?: SystemProp<CSS.Property.GridAutoRows, T>;
}
declare const gridAutoRows: StyleGenerator<GridAutoRowsProps<Theme>>;
interface GridTemplateColumnsProps<T extends ITheme = Theme> {
    gridTemplateColumns?: SystemProp<ThemeNamespaceValue<'gridTemplateColumns', T> | CSS.Property.GridTemplateColumns, T>;
}
declare const gridTemplateColumns: StyleGenerator<GridTemplateColumnsProps<Theme>>;
interface GridTemplateRowsProps<T extends ITheme = Theme> {
    gridTemplateRows?: SystemProp<ThemeNamespaceValue<'gridTemplateRows', T> | CSS.Property.GridTemplateRows, T>;
}
declare const gridTemplateRows: StyleGenerator<GridTemplateRowsProps<Theme>>;
interface GridTemplateAreasProps<T extends ITheme = Theme> {
    gridTemplateAreas?: SystemProp<CSS.Property.GridTemplateAreas, T>;
}
declare const gridTemplateAreas: StyleGenerator<GridTemplateAreasProps<Theme>>;
interface GridAreaProps<T extends ITheme = Theme> {
    gridArea?: SystemProp<CSS.Property.GridArea, T>;
}
declare const gridArea: StyleGenerator<GridAreaProps<Theme>>;
interface GridsProps<T extends ITheme = Theme> extends GapProps<T>, ColumnGapProps<T>, RowGapProps<T>, GridColumnProps<T>, GridRowProps<T>, GridAutoFlowProps<T>, GridAutoColumnsProps<T>, GridAutoRowsProps<T>, GridTemplateColumnsProps<T>, GridTemplateRowsProps<T>, GridTemplateAreasProps<T>, GridAreaProps<T> {
}
declare const grids: StyleGenerator<GridsProps<Theme>>;

interface AppearanceProps<T extends ITheme = Theme> {
    appearance?: SystemProp<CSS.Property.Appearance, T>;
}
declare const appearance: StyleGenerator<AppearanceProps<Theme>>;
interface CursorProps<T extends ITheme = Theme> {
    cursor?: SystemProp<CSS.Property.Cursor, T>;
}
declare const cursor: StyleGenerator<CursorProps<Theme>>;
interface PointerEventsProps<T extends ITheme = Theme> {
    pointerEvents?: SystemProp<CSS.Property.PointerEvents, T>;
}
declare const pointerEvents: StyleGenerator<PointerEventsProps<Theme>>;
interface ResizeProps<T extends ITheme = Theme> {
    resize?: SystemProp<CSS.Property.Resize, T>;
}
declare const resize: StyleGenerator<ResizeProps<Theme>>;
interface UserSelectProps<T extends ITheme = Theme> {
    userSelect?: SystemProp<CSS.Property.UserSelect, T>;
}
declare const userSelect: StyleGenerator<UserSelectProps<Theme>>;
interface InteractivityProps<T extends ITheme = Theme> extends AppearanceProps<T>, CursorProps<T>, PointerEventsProps<T>, ResizeProps<T>, UserSelectProps<T> {
}
declare const interactivity: StyleGenerator<InteractivityProps<Theme>>;

declare type ThemeSize<T extends ITheme = Theme> = ThemeNamespaceValue<'sizes', T>;
declare type Size<T extends ITheme = Theme> = Percent | ThemeSize<T>;
declare const getSize: ThemeGetter<ThemeSize<Theme>>;
interface WidthProps<T extends ITheme = Theme> {
    w?: SystemProp<Size<T> | CSS.Property.Width, T>;
}
declare const width: StyleGenerator<WidthProps<Theme>>;
interface HeightProps<T extends ITheme = Theme> {
    h?: SystemProp<Size<T> | CSS.Property.Height, T>;
}
declare const height: StyleGenerator<HeightProps<Theme>>;
declare type MaxWidthProp<T extends ITheme> = SystemProp<Size<T> | CSS.Property.MaxWidth, T>;
interface MaxWidthProps<T extends ITheme = Theme> {
    maxWidth?: MaxWidthProp<T>;
    maxW?: MaxWidthProp<T>;
}
declare const maxWidth: StyleGenerator<MaxWidthProps<Theme>>;
declare type MaxHeightProp<T extends ITheme> = SystemProp<Size<T> | CSS.Property.MaxHeight, T>;
interface MaxHeightProps<T extends ITheme = Theme> {
    maxHeight?: MaxHeightProp<T>;
    maxH?: MaxHeightProp<T>;
}
declare const maxHeight: StyleGenerator<MaxHeightProps<Theme>>;
interface MinWidthProps<T extends ITheme = Theme> {
    minWidth?: SystemProp<Size<T> | CSS.Property.MinWidth, T>;
}
declare const minWidth: StyleGenerator<MinWidthProps<Theme>>;
declare type MinHeightProp<T extends ITheme> = SystemProp<Size<T> | CSS.Property.MinHeight, T>;
interface MinHeightProps<T extends ITheme = Theme> {
    minHeight?: MinHeightProp<T>;
    minH?: MinHeightProp<T>;
}
declare const minHeight: StyleGenerator<MinHeightProps<Theme>>;
interface MaskSizeProps<T extends ITheme = Theme> {
    maskSize?: SystemProp<Size<T> | CSS.Property.MaskSize, T>;
}
declare const maskSize: StyleGenerator<MaskSizeProps<Theme>>;
interface SizingProps<T extends ITheme = Theme> extends WidthProps<T>, HeightProps<T>, MaxWidthProps<T>, MaxHeightProps<T>, MinWidthProps<T>, MinHeightProps<T>, MaskSizeProps<T> {
}
declare const sizing: StyleGenerator<SizingProps<Theme>>;

interface FillProps<T extends ITheme = Theme> {
    fill?: SystemProp<ThemeColor<T> | CSS.Property.Fill, T>;
}
declare const fill: StyleGenerator<FillProps<Theme>>;
interface StrokeProps<T extends ITheme = Theme> {
    stroke?: SystemProp<ThemeColor<T> | CSS.Property.Stroke, T>;
}
declare const stroke: StyleGenerator<StrokeProps<Theme>>;
interface SvgProps<T extends ITheme = Theme> extends FillProps<T>, StrokeProps<T> {
}
declare const svg: StyleGenerator<SvgProps<Theme>>;

interface BorderCollapseProps<T extends ITheme = Theme> {
    borderCollapse?: SystemProp<CSS.Property.BorderCollapse, T>;
}
declare const borderCollapse: StyleGenerator<BorderCollapseProps<Theme>>;
interface TableLayoutProps<T extends ITheme = Theme> {
    tableLayout?: SystemProp<CSS.Property.TableLayout, T>;
}
declare const tableLayout: StyleGenerator<TableLayoutProps<Theme>>;
interface TablesProps<T extends ITheme = Theme> extends BorderCollapseProps<T>, TableLayoutProps<T> {
}
declare const tables: StyleGenerator<TablesProps<Theme>>;

declare type ThemeTransform<T extends ITheme = Theme> = ThemeNamespaceValue<'transforms', T>;
declare const getTransform: ThemeGetter<ThemeTransform<Theme>>;
interface TransformProps<T extends ITheme = Theme> {
    transform?: SystemProp<true | string, T>;
}
declare const transform: StyleGenerator<TransformProps<Theme>>;
interface TransformOriginProps<T extends ITheme = Theme> {
    transformOrigin?: SystemProp<CSS.Property.TransformOrigin, T>;
}
declare const transformOrigin: StyleGenerator<TransformOriginProps<Theme>>;
interface TranslateXProps<T extends ITheme = Theme> {
    translateX?: SystemProp<Space<T>, T>;
}
declare const translateX: StyleGenerator<TranslateXProps<Theme>>;
interface TranslateYProps<T extends ITheme = Theme> {
    translateY?: SystemProp<Space<T>, T>;
}
declare const translateY: StyleGenerator<TranslateYProps<Theme>>;
interface RotateProps<T extends ITheme = Theme> {
    rotate?: SystemProp<Angle, T>;
}
declare const rotate: StyleGenerator<{}>;
interface SkewXProps<T extends ITheme = Theme> {
    skewX?: SystemProp<Angle, T>;
}
declare const skewX: StyleGenerator<SkewXProps<Theme>>;
interface SkewYProps<T extends ITheme = Theme> {
    skewY?: SystemProp<Angle, T>;
}
declare const skewY: StyleGenerator<SkewYProps<Theme>>;
declare type Scale = number | string;
interface ScaleProps<T extends ITheme = Theme> {
    scale?: SystemProp<Scale, T>;
}
declare const scale: StyleGenerator<ScaleProps<Theme>>;
interface ScaleXProps<T extends ITheme = Theme> {
    scaleX?: SystemProp<Scale, T>;
}
declare const scaleX: StyleGenerator<ScaleXProps<Theme>>;
interface ScaleYProps<T extends ITheme = Theme> {
    scaleY?: SystemProp<Scale, T>;
}
declare const scaleY: StyleGenerator<ScaleYProps<Theme>>;
interface TransformsProps<T extends ITheme = Theme> extends TransformProps<T>, TransformOriginProps<T>, TranslateXProps<T>, TranslateYProps<T>, RotateProps<T>, SkewXProps<T>, SkewYProps<T>, ScaleProps<T>, ScaleXProps<T>, ScaleYProps<T> {
}
declare const transforms: StyleGenerator<TransformsProps<Theme>>;

declare type ThemeFont<T extends ITheme = Theme> = ThemeNamespaceValue<'fonts', T>;
declare const getFont: ThemeGetter<ThemeFont<Theme>>;
declare type ThemeLineHeight<T extends ITheme = Theme> = ThemeNamespaceValue<'lineHeights', T>;
declare type LineHeightValue = number | string;
declare type LineHeight<T extends ITheme = Theme> = LineHeightValue | ThemeLineHeight<T>;
declare const getLineHeight: ThemeGetter<ThemeLineHeight<Theme>>;
declare type ThemeFontWeight<T extends ITheme = Theme> = ThemeNamespaceValue<'fontWeights', T>;
declare const getFontWeight: ThemeGetter<ThemeFontWeight<Theme>>;
declare type ThemeLetterSpacing<T extends ITheme = Theme> = ThemeNamespaceValue<'letterSpacings', T>;
declare type LetterSpacing<T extends ITheme = Theme> = Pixel | ThemeLetterSpacing<T>;
declare const getLetterSpacing: ThemeGetter<ThemeLetterSpacing<Theme>>;
declare type ThemeFontSize<T extends ITheme = Theme> = ThemeNamespaceValue<'fontSizes', T>;
declare type FontSize<T extends ITheme = Theme> = Pixel | ThemeFontSize<T>;
declare const getFontSize: ThemeGetter<ThemeFontSize<Theme>>;
interface FontFamilyProps<T extends ITheme = Theme> {
    fontFamily?: SystemProp<ThemeFont<T> | CSS.Property.FontFamily, T>;
}
declare const fontFamily: StyleGenerator<FontFamilyProps<Theme>>;
interface FontSizeProps<T extends ITheme = Theme> {
    fontSize?: SystemProp<FontSize<T> | CSS.Property.FontSize, T>;
}
declare const fontSize: StyleGenerator<FontSizeProps<Theme>>;
interface LineHeightProps<T extends ITheme = Theme> {
    lineHeight?: SystemProp<LineHeight<T> | CSS.Property.LineHeight, T>;
}
declare const lineHeight: StyleGenerator<LineHeightProps<Theme>>;
interface FontWeightProps<T extends ITheme = Theme> {
    fontWeight?: SystemProp<ThemeFontWeight<T> | CSS.Property.FontWeight, T>;
}
declare const fontWeight: StyleGenerator<FontWeightProps<Theme>>;
interface FontStyleProps<T extends ITheme = Theme> {
    fontStyle?: SystemProp<CSS.Property.FontStyle, T>;
}
declare const fontStyle: StyleGenerator<FontStyleProps<Theme>>;
interface LetterSpacingProps<T extends ITheme = Theme> {
    letterSpacing?: SystemProp<LetterSpacing<T> | CSS.Property.LetterSpacing, T>;
}
declare const letterSpacing: StyleGenerator<LetterSpacingProps<Theme>>;
interface ColorProps<T extends ITheme = Theme> {
    color?: SystemProp<Color<T>, T>;
}
declare const color: StyleGenerator<ColorProps<Theme>>;
interface TextTransformProps<T extends ITheme = Theme> {
    textTransform?: SystemProp<CSS.Property.TextTransform, T>;
}
declare const textTransform: StyleGenerator<TextTransformProps<Theme>>;
interface TextDecorationProps<T extends ITheme = Theme> {
    textDecoration?: SystemProp<CSS.Property.TextDecoration, T>;
}
declare const textDecoration: StyleGenerator<TextDecorationProps<Theme>>;
interface TextAlignProps<T extends ITheme = Theme> {
    textAlign?: SystemProp<CSS.Property.TextAlign, T>;
}
declare const textAlign: StyleGenerator<TextAlignProps<Theme>>;
interface VerticalAlignProps<T extends ITheme = Theme> {
    verticalAlign?: SystemProp<CSS.Property.VerticalAlign, T>;
}
declare const verticalAlign: StyleGenerator<VerticalAlignProps<Theme>>;
interface WhiteSpaceProps<T extends ITheme = Theme> {
    whiteSpace?: SystemProp<CSS.Property.WhiteSpace, T>;
}
declare const whiteSpace: StyleGenerator<WhiteSpaceProps<Theme>>;
interface TextOverflowProps<T extends ITheme = Theme> {
    textOverflow?: SystemProp<CSS.Property.TextOverflow, T>;
}
declare const textOverflow: StyleGenerator<TextOverflowProps<Theme>>;
interface ListStyleTypeProps<T extends ITheme = Theme> {
    listStyleType?: SystemProp<CSS.Property.ListStyleType, T>;
}
declare const listStyleType: StyleGenerator<ListStyleTypeProps<Theme>>;
interface ListStylePositionProps<T extends ITheme = Theme> {
    listStylePosition?: SystemProp<CSS.Property.ListStylePosition, T>;
}
declare const listStylePosition: StyleGenerator<ListStylePositionProps<Theme>>;
interface AllProps<T extends ITheme = Theme> extends FontFamilyProps<T>, FontSizeProps<T>, FontStyleProps<T>, LineHeightProps<T>, FontWeightProps<T>, TextAlignProps<T>, LetterSpacingProps<T>, ColorProps<T>, TextTransformProps<T>, TextDecorationProps<T>, VerticalAlignProps<T>, WhiteSpaceProps<T>, TextOverflowProps<T>, ListStyleTypeProps<T>, ListStylePositionProps<T>, SpaceProps<T> {
}
declare type ThemeText<T extends ITheme = Theme> = ThemeNamespaceValue<'texts', T>;
interface TextProps<T extends ITheme = Theme> {
    text?: SystemProp<ThemeText<T>, T>;
}
declare const text: StyleGenerator<TextProps<Theme>>;
interface TypographyProps<T extends ITheme = Theme> extends AllProps<T>, TextProps<T> {
}
declare const typography: StyleGenerator<TypographyProps<Theme>>;

interface SystemProps<T extends ITheme = Theme> extends AnimationsProps<T>, BackgroundsProps<T>, BordersProps<T>, EffectsProps<T>, FlexboxGridsProps<T>, FlexboxesProps<T>, GridsProps<T>, InteractivityProps<T>, LayoutProps<T>, SizingProps<T>, SpaceProps<T>, SvgProps<T>, TablesProps<T>, TransformsProps<T>, TransitionsProps<T>, TypographyProps<T> {
}
declare const system: StyleGenerator<SystemProps<Theme>>;

interface ThGetters {
    angle: typeof getAngle;
    animation: typeof getAnimation;
    border: typeof getBorder;
    borderColor: typeof getBorderColor;
    borderStyle: typeof getBorderStyle;
    borderWidth: typeof getBorderWidth;
    color: typeof getColor;
    duration: typeof getDuration;
    font: typeof getFont;
    fontSize: typeof getFontSize;
    fontWeight: typeof getFontWeight;
    inset: typeof getInset;
    letterSpacing: typeof getLetterSpacing;
    lineHeight: typeof getLineHeight;
    percent: typeof getPercent;
    px: typeof getPx;
    radius: typeof getRadius;
    ringWidth: typeof getRingWidth;
    shadow: typeof getShadow;
    size: typeof getSize;
    space: typeof getSpace;
    timingFunction: typeof getTimingFunction;
    transform: typeof getTransform;
    transition: typeof getTransition;
    transitionProperty: typeof getTransitionProperty;
    zIndex: typeof getZIndex;
}
interface Th extends ThemeGetter, ThGetters {
}
declare const th: Th;

declare const up: <T>(key: string | number, rules: T) => (props: Props) => T | (string | T)[];
declare const down: <T>(key: string | number, rules: T) => (props: Props) => (string | T)[] | null;
declare const between: <T>(lower: string | number, upper: string | number, rules: T) => (props: Props) => T | (string | T)[] | null;
declare const breakpoints: <T>(values: {
    [key: string]: T;
    [key: number]: T;
}) => (props: Props) => T[];

declare const rpxTransformers: {
    px: (value: CSSScalar) => CSSScalar;
    border: (value: CSSScalar) => CSSScalar;
};

declare type ColorVariants = number[] | readonly number[];
declare type ColorTones = number[];
declare const defaultAlphaVariants: readonly [0, 5, 10, 20, 25, 30, 40, 50, 60, 70, 75, 80, 90, 95, 100];
declare type DefaultAlphaVariants = typeof defaultAlphaVariants;
declare type AlphaVariant<C extends Colors, V extends ColorVariants> = `${Extract<keyof C, string>}-a${V[number]}`;
declare type AlphaVariants<C extends Colors, V extends ColorVariants> = {
    [K in AlphaVariant<C, V>]: string | Colors;
};
declare const generateHexAlphaVariants: <C extends Colors, V extends ColorVariants>(colors: C, variants?: V) => C & AlphaVariants<C, V>;
declare const aliasColor: <T extends ColorTones>(alias: string, color: string, tones?: T, variants?: ColorVariants) => {
    [key: string]: ThemeAlias;
};

declare const defaultTheme: {
    colors: {
        black: string;
        white: string;
        'blue-gray-50': string;
        'blue-gray-100': string;
        'blue-gray-200': string;
        'blue-gray-300': string;
        'blue-gray-400': string;
        'blue-gray-500': string;
        'blue-gray-600': string;
        'blue-gray-700': string;
        'blue-gray-800': string;
        'blue-gray-900': string;
        'cool-gray-50': string;
        'cool-gray-100': string;
        'cool-gray-200': string;
        'cool-gray-300': string;
        'cool-gray-400': string;
        'cool-gray-500': string;
        'cool-gray-600': string;
        'cool-gray-700': string;
        'cool-gray-800': string;
        'cool-gray-900': string;
        'gray-50': string;
        'gray-100': string;
        'gray-200': string;
        'gray-300': string;
        'gray-400': string;
        'gray-500': string;
        'gray-600': string;
        'gray-700': string;
        'gray-800': string;
        'gray-900': string;
        'true-gray-50': string;
        'true-gray-100': string;
        'true-gray-200': string;
        'true-gray-300': string;
        'true-gray-400': string;
        'true-gray-500': string;
        'true-gray-600': string;
        'true-gray-700': string;
        'true-gray-800': string;
        'true-gray-900': string;
        'warm-gray-50': string;
        'warm-gray-100': string;
        'warm-gray-200': string;
        'warm-gray-300': string;
        'warm-gray-400': string;
        'warm-gray-500': string;
        'warm-gray-600': string;
        'warm-gray-700': string;
        'warm-gray-800': string;
        'warm-gray-900': string;
        'red-50': string;
        'red-100': string;
        'red-200': string;
        'red-300': string;
        'red-400': string;
        'red-500': string;
        'red-600': string;
        'red-700': string;
        'red-800': string;
        'red-900': string;
        'orange-50': string;
        'orange-100': string;
        'orange-200': string;
        'orange-300': string;
        'orange-400': string;
        'orange-500': string;
        'orange-600': string;
        'orange-700': string;
        'orange-800': string;
        'orange-900': string;
        'amber-50': string;
        'amber-100': string;
        'amber-200': string;
        'amber-300': string;
        'amber-400': string;
        'amber-500': string;
        'amber-600': string;
        'amber-700': string;
        'amber-800': string;
        'amber-900': string;
        'yellow-50': string;
        'yellow-100': string;
        'yellow-200': string;
        'yellow-300': string;
        'yellow-400': string;
        'yellow-500': string;
        'yellow-600': string;
        'yellow-700': string;
        'yellow-800': string;
        'yellow-900': string;
        'lime-50': string;
        'lime-100': string;
        'lime-200': string;
        'lime-300': string;
        'lime-400': string;
        'lime-500': string;
        'lime-600': string;
        'lime-700': string;
        'lime-800': string;
        'lime-900': string;
        'green-50': string;
        'green-100': string;
        'green-200': string;
        'green-300': string;
        'green-400': string;
        'green-500': string;
        'green-600': string;
        'green-700': string;
        'green-800': string;
        'green-900': string;
        'emerald-50': string;
        'emerald-100': string;
        'emerald-200': string;
        'emerald-300': string;
        'emerald-400': string;
        'emerald-500': string;
        'emerald-600': string;
        'emerald-700': string;
        'emerald-800': string;
        'emerald-900': string;
        'teal-50': string;
        'teal-100': string;
        'teal-200': string;
        'teal-300': string;
        'teal-400': string;
        'teal-500': string;
        'teal-600': string;
        'teal-700': string;
        'teal-800': string;
        'teal-900': string;
        'cyan-50': string;
        'cyan-100': string;
        'cyan-200': string;
        'cyan-300': string;
        'cyan-400': string;
        'cyan-500': string;
        'cyan-600': string;
        'cyan-700': string;
        'cyan-800': string;
        'cyan-900': string;
        'light-blue-50': string;
        'light-blue-100': string;
        'light-blue-200': string;
        'light-blue-300': string;
        'light-blue-400': string;
        'light-blue-500': string;
        'light-blue-600': string;
        'light-blue-700': string;
        'light-blue-800': string;
        'light-blue-900': string;
        'blue-50': string;
        'blue-100': string;
        'blue-200': string;
        'blue-300': string;
        'blue-400': string;
        'blue-500': string;
        'blue-600': string;
        'blue-700': string;
        'blue-800': string;
        'blue-900': string;
        'indigo-50': string;
        'indigo-100': string;
        'indigo-200': string;
        'indigo-300': string;
        'indigo-400': string;
        'indigo-500': string;
        'indigo-600': string;
        'indigo-700': string;
        'indigo-800': string;
        'indigo-900': string;
        'violet-50': string;
        'violet-100': string;
        'violet-200': string;
        'violet-300': string;
        'violet-400': string;
        'violet-500': string;
        'violet-600': string;
        'violet-700': string;
        'violet-800': string;
        'violet-900': string;
        'purple-50': string;
        'purple-100': string;
        'purple-200': string;
        'purple-300': string;
        'purple-400': string;
        'purple-500': string;
        'purple-600': string;
        'purple-700': string;
        'purple-800': string;
        'purple-900': string;
        'fuchsia-50': string;
        'fuchsia-100': string;
        'fuchsia-200': string;
        'fuchsia-300': string;
        'fuchsia-400': string;
        'fuchsia-500': string;
        'fuchsia-600': string;
        'fuchsia-700': string;
        'fuchsia-800': string;
        'fuchsia-900': string;
        'pink-50': string;
        'pink-100': string;
        'pink-200': string;
        'pink-300': string;
        'pink-400': string;
        'pink-500': string;
        'pink-600': string;
        'pink-700': string;
        'pink-800': string;
        'pink-900': string;
        'rose-50': string;
        'rose-100': string;
        'rose-200': string;
        'rose-300': string;
        'rose-400': string;
        'rose-500': string;
        'rose-600': string;
        'rose-700': string;
        'rose-800': string;
        'rose-900': string;
    } & {
        [x: `black-a${number}`]: string | Colors;
        [x: `white-a${number}`]: string | Colors;
        [x: `blue-gray-50-a${number}`]: string | Colors;
        [x: `blue-gray-100-a${number}`]: string | Colors;
        [x: `blue-gray-200-a${number}`]: string | Colors;
        [x: `blue-gray-300-a${number}`]: string | Colors;
        [x: `blue-gray-400-a${number}`]: string | Colors;
        [x: `blue-gray-500-a${number}`]: string | Colors;
        [x: `blue-gray-600-a${number}`]: string | Colors;
        [x: `blue-gray-700-a${number}`]: string | Colors;
        [x: `blue-gray-800-a${number}`]: string | Colors;
        [x: `blue-gray-900-a${number}`]: string | Colors;
        [x: `cool-gray-50-a${number}`]: string | Colors;
        [x: `cool-gray-100-a${number}`]: string | Colors;
        [x: `cool-gray-200-a${number}`]: string | Colors;
        [x: `cool-gray-300-a${number}`]: string | Colors;
        [x: `cool-gray-400-a${number}`]: string | Colors;
        [x: `cool-gray-500-a${number}`]: string | Colors;
        [x: `cool-gray-600-a${number}`]: string | Colors;
        [x: `cool-gray-700-a${number}`]: string | Colors;
        [x: `cool-gray-800-a${number}`]: string | Colors;
        [x: `cool-gray-900-a${number}`]: string | Colors;
        [x: `gray-50-a${number}`]: string | Colors;
        [x: `gray-100-a${number}`]: string | Colors;
        [x: `gray-200-a${number}`]: string | Colors;
        [x: `gray-300-a${number}`]: string | Colors;
        [x: `gray-400-a${number}`]: string | Colors;
        [x: `gray-500-a${number}`]: string | Colors;
        [x: `gray-600-a${number}`]: string | Colors;
        [x: `gray-700-a${number}`]: string | Colors;
        [x: `gray-800-a${number}`]: string | Colors;
        [x: `gray-900-a${number}`]: string | Colors;
        [x: `true-gray-50-a${number}`]: string | Colors;
        [x: `true-gray-100-a${number}`]: string | Colors;
        [x: `true-gray-200-a${number}`]: string | Colors;
        [x: `true-gray-300-a${number}`]: string | Colors;
        [x: `true-gray-400-a${number}`]: string | Colors;
        [x: `true-gray-500-a${number}`]: string | Colors;
        [x: `true-gray-600-a${number}`]: string | Colors;
        [x: `true-gray-700-a${number}`]: string | Colors;
        [x: `true-gray-800-a${number}`]: string | Colors;
        [x: `true-gray-900-a${number}`]: string | Colors;
        [x: `warm-gray-50-a${number}`]: string | Colors;
        [x: `warm-gray-100-a${number}`]: string | Colors;
        [x: `warm-gray-200-a${number}`]: string | Colors;
        [x: `warm-gray-300-a${number}`]: string | Colors;
        [x: `warm-gray-400-a${number}`]: string | Colors;
        [x: `warm-gray-500-a${number}`]: string | Colors;
        [x: `warm-gray-600-a${number}`]: string | Colors;
        [x: `warm-gray-700-a${number}`]: string | Colors;
        [x: `warm-gray-800-a${number}`]: string | Colors;
        [x: `warm-gray-900-a${number}`]: string | Colors;
        [x: `red-50-a${number}`]: string | Colors;
        [x: `red-100-a${number}`]: string | Colors;
        [x: `red-200-a${number}`]: string | Colors;
        [x: `red-300-a${number}`]: string | Colors;
        [x: `red-400-a${number}`]: string | Colors;
        [x: `red-500-a${number}`]: string | Colors;
        [x: `red-600-a${number}`]: string | Colors;
        [x: `red-700-a${number}`]: string | Colors;
        [x: `red-800-a${number}`]: string | Colors;
        [x: `red-900-a${number}`]: string | Colors;
        [x: `orange-50-a${number}`]: string | Colors;
        [x: `orange-100-a${number}`]: string | Colors;
        [x: `orange-200-a${number}`]: string | Colors;
        [x: `orange-300-a${number}`]: string | Colors;
        [x: `orange-400-a${number}`]: string | Colors;
        [x: `orange-500-a${number}`]: string | Colors;
        [x: `orange-600-a${number}`]: string | Colors;
        [x: `orange-700-a${number}`]: string | Colors;
        [x: `orange-800-a${number}`]: string | Colors;
        [x: `orange-900-a${number}`]: string | Colors;
        [x: `amber-50-a${number}`]: string | Colors;
        [x: `amber-100-a${number}`]: string | Colors;
        [x: `amber-200-a${number}`]: string | Colors;
        [x: `amber-300-a${number}`]: string | Colors;
        [x: `amber-400-a${number}`]: string | Colors;
        [x: `amber-500-a${number}`]: string | Colors;
        [x: `amber-600-a${number}`]: string | Colors;
        [x: `amber-700-a${number}`]: string | Colors;
        [x: `amber-800-a${number}`]: string | Colors;
        [x: `amber-900-a${number}`]: string | Colors;
        [x: `yellow-50-a${number}`]: string | Colors;
        [x: `yellow-100-a${number}`]: string | Colors;
        [x: `yellow-200-a${number}`]: string | Colors;
        [x: `yellow-300-a${number}`]: string | Colors;
        [x: `yellow-400-a${number}`]: string | Colors;
        [x: `yellow-500-a${number}`]: string | Colors;
        [x: `yellow-600-a${number}`]: string | Colors;
        [x: `yellow-700-a${number}`]: string | Colors;
        [x: `yellow-800-a${number}`]: string | Colors;
        [x: `yellow-900-a${number}`]: string | Colors;
        [x: `lime-50-a${number}`]: string | Colors;
        [x: `lime-100-a${number}`]: string | Colors;
        [x: `lime-200-a${number}`]: string | Colors;
        [x: `lime-300-a${number}`]: string | Colors;
        [x: `lime-400-a${number}`]: string | Colors;
        [x: `lime-500-a${number}`]: string | Colors;
        [x: `lime-600-a${number}`]: string | Colors;
        [x: `lime-700-a${number}`]: string | Colors;
        [x: `lime-800-a${number}`]: string | Colors;
        [x: `lime-900-a${number}`]: string | Colors;
        [x: `green-50-a${number}`]: string | Colors;
        [x: `green-100-a${number}`]: string | Colors;
        [x: `green-200-a${number}`]: string | Colors;
        [x: `green-300-a${number}`]: string | Colors;
        [x: `green-400-a${number}`]: string | Colors;
        [x: `green-500-a${number}`]: string | Colors;
        [x: `green-600-a${number}`]: string | Colors;
        [x: `green-700-a${number}`]: string | Colors;
        [x: `green-800-a${number}`]: string | Colors;
        [x: `green-900-a${number}`]: string | Colors;
        [x: `emerald-50-a${number}`]: string | Colors;
        [x: `emerald-100-a${number}`]: string | Colors;
        [x: `emerald-200-a${number}`]: string | Colors;
        [x: `emerald-300-a${number}`]: string | Colors;
        [x: `emerald-400-a${number}`]: string | Colors;
        [x: `emerald-500-a${number}`]: string | Colors;
        [x: `emerald-600-a${number}`]: string | Colors;
        [x: `emerald-700-a${number}`]: string | Colors;
        [x: `emerald-800-a${number}`]: string | Colors;
        [x: `emerald-900-a${number}`]: string | Colors;
        [x: `teal-50-a${number}`]: string | Colors;
        [x: `teal-100-a${number}`]: string | Colors;
        [x: `teal-200-a${number}`]: string | Colors;
        [x: `teal-300-a${number}`]: string | Colors;
        [x: `teal-400-a${number}`]: string | Colors;
        [x: `teal-500-a${number}`]: string | Colors;
        [x: `teal-600-a${number}`]: string | Colors;
        [x: `teal-700-a${number}`]: string | Colors;
        [x: `teal-800-a${number}`]: string | Colors;
        [x: `teal-900-a${number}`]: string | Colors;
        [x: `cyan-50-a${number}`]: string | Colors;
        [x: `cyan-100-a${number}`]: string | Colors;
        [x: `cyan-200-a${number}`]: string | Colors;
        [x: `cyan-300-a${number}`]: string | Colors;
        [x: `cyan-400-a${number}`]: string | Colors;
        [x: `cyan-500-a${number}`]: string | Colors;
        [x: `cyan-600-a${number}`]: string | Colors;
        [x: `cyan-700-a${number}`]: string | Colors;
        [x: `cyan-800-a${number}`]: string | Colors;
        [x: `cyan-900-a${number}`]: string | Colors;
        [x: `light-blue-50-a${number}`]: string | Colors;
        [x: `light-blue-100-a${number}`]: string | Colors;
        [x: `light-blue-200-a${number}`]: string | Colors;
        [x: `light-blue-300-a${number}`]: string | Colors;
        [x: `light-blue-400-a${number}`]: string | Colors;
        [x: `light-blue-500-a${number}`]: string | Colors;
        [x: `light-blue-600-a${number}`]: string | Colors;
        [x: `light-blue-700-a${number}`]: string | Colors;
        [x: `light-blue-800-a${number}`]: string | Colors;
        [x: `light-blue-900-a${number}`]: string | Colors;
        [x: `blue-50-a${number}`]: string | Colors;
        [x: `blue-100-a${number}`]: string | Colors;
        [x: `blue-200-a${number}`]: string | Colors;
        [x: `blue-300-a${number}`]: string | Colors;
        [x: `blue-400-a${number}`]: string | Colors;
        [x: `blue-500-a${number}`]: string | Colors;
        [x: `blue-600-a${number}`]: string | Colors;
        [x: `blue-700-a${number}`]: string | Colors;
        [x: `blue-800-a${number}`]: string | Colors;
        [x: `blue-900-a${number}`]: string | Colors;
        [x: `indigo-50-a${number}`]: string | Colors;
        [x: `indigo-100-a${number}`]: string | Colors;
        [x: `indigo-200-a${number}`]: string | Colors;
        [x: `indigo-300-a${number}`]: string | Colors;
        [x: `indigo-400-a${number}`]: string | Colors;
        [x: `indigo-500-a${number}`]: string | Colors;
        [x: `indigo-600-a${number}`]: string | Colors;
        [x: `indigo-700-a${number}`]: string | Colors;
        [x: `indigo-800-a${number}`]: string | Colors;
        [x: `indigo-900-a${number}`]: string | Colors;
        [x: `violet-50-a${number}`]: string | Colors;
        [x: `violet-100-a${number}`]: string | Colors;
        [x: `violet-200-a${number}`]: string | Colors;
        [x: `violet-300-a${number}`]: string | Colors;
        [x: `violet-400-a${number}`]: string | Colors;
        [x: `violet-500-a${number}`]: string | Colors;
        [x: `violet-600-a${number}`]: string | Colors;
        [x: `violet-700-a${number}`]: string | Colors;
        [x: `violet-800-a${number}`]: string | Colors;
        [x: `violet-900-a${number}`]: string | Colors;
        [x: `purple-50-a${number}`]: string | Colors;
        [x: `purple-100-a${number}`]: string | Colors;
        [x: `purple-200-a${number}`]: string | Colors;
        [x: `purple-300-a${number}`]: string | Colors;
        [x: `purple-400-a${number}`]: string | Colors;
        [x: `purple-500-a${number}`]: string | Colors;
        [x: `purple-600-a${number}`]: string | Colors;
        [x: `purple-700-a${number}`]: string | Colors;
        [x: `purple-800-a${number}`]: string | Colors;
        [x: `purple-900-a${number}`]: string | Colors;
        [x: `fuchsia-50-a${number}`]: string | Colors;
        [x: `fuchsia-100-a${number}`]: string | Colors;
        [x: `fuchsia-200-a${number}`]: string | Colors;
        [x: `fuchsia-300-a${number}`]: string | Colors;
        [x: `fuchsia-400-a${number}`]: string | Colors;
        [x: `fuchsia-500-a${number}`]: string | Colors;
        [x: `fuchsia-600-a${number}`]: string | Colors;
        [x: `fuchsia-700-a${number}`]: string | Colors;
        [x: `fuchsia-800-a${number}`]: string | Colors;
        [x: `fuchsia-900-a${number}`]: string | Colors;
        [x: `pink-50-a${number}`]: string | Colors;
        [x: `pink-100-a${number}`]: string | Colors;
        [x: `pink-200-a${number}`]: string | Colors;
        [x: `pink-300-a${number}`]: string | Colors;
        [x: `pink-400-a${number}`]: string | Colors;
        [x: `pink-500-a${number}`]: string | Colors;
        [x: `pink-600-a${number}`]: string | Colors;
        [x: `pink-700-a${number}`]: string | Colors;
        [x: `pink-800-a${number}`]: string | Colors;
        [x: `pink-900-a${number}`]: string | Colors;
        [x: `rose-50-a${number}`]: string | Colors;
        [x: `rose-100-a${number}`]: string | Colors;
        [x: `rose-200-a${number}`]: string | Colors;
        [x: `rose-300-a${number}`]: string | Colors;
        [x: `rose-400-a${number}`]: string | Colors;
        [x: `rose-500-a${number}`]: string | Colors;
        [x: `rose-600-a${number}`]: string | Colors;
        [x: `rose-700-a${number}`]: string | Colors;
        [x: `rose-800-a${number}`]: string | Colors;
        [x: `rose-900-a${number}`]: string | Colors;
    };
    space: {
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    screens: {
        _: number;
        xs: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
        '2xl': number;
    };
    durations: {
        instant: string;
        'fast-in': string;
        'fast-out': string;
        'slow-in': string;
        'slow-out': string;
    };
    sizes: {
        0.5: undefined;
        1: undefined;
        '0.5s': string;
        '1s': string;
        full: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '3xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    radii: {
        none: string;
        sm: string;
        default: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '3xl': string;
        full: string;
    };
    shadows: {
        xs: string;
        sm: string;
        default: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        inner: string;
        outline: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        default: string;
        lg: string;
        xl: string;
        '2xl': string;
        '3xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        hairline: string;
        thin: string;
        light: string;
        normal: string;
        medium: string;
        semibold: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    fonts: {
        mono: string;
        serif: string;
        sans: string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    lineHeights: {
        none: number;
        tight: number;
        snug: number;
        normal: number;
        relaxed: number;
        loose: number;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        xs: string;
        sm: string;
        default: string;
        lg: string;
        xl: string;
        '2xl': string;
        '3xl': string;
        '4xl': string;
        '5xl': number;
        '6xl': number;
        '7xl': number;
        '8xl': number;
        '9xl': number;
    };
    gridTemplateColumns: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
    };
    gridTemplateRows: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
    };
    borderWidths: {
        default: number;
    };
    ringWidths: {
        default: number;
    };
    borders: {
        default: string;
    };
    texts: {
        xs: {
            fontSize: string;
            lineHeight: string;
        };
        sm: {
            fontSize: string;
            lineHeight: string;
        };
        default: {
            fontSize: string;
            lineHeight: string;
        };
        lg: {
            fontSize: string;
            lineHeight: string;
        };
        xl: {
            fontSize: string;
            lineHeight: string;
        };
        '2xl': {
            fontSize: string;
            lineHeight: string;
        };
        '3xl': {
            fontSize: string;
            lineHeight: string;
        };
        '4xl': {
            fontSize: string;
            lineHeight: string;
        };
        '5xl': {
            fontSize: string;
            lineHeight: string;
        };
        '6xl': {
            fontSize: string;
            lineHeight: string;
        };
        '7xl': {
            fontSize: string;
            lineHeight: string;
        };
        '8xl': {
            fontSize: string;
            lineHeight: string;
        };
        '9xl': {
            fontSize: string;
            lineHeight: string;
        };
    };
    transitions: {
        [key: string]: string;
    };
    transitionProperties: {
        default: string[];
        colors: string[];
        opacity: string[];
        shadow: string[];
        transform: string[];
    };
    timingFunctions: {
        'ease-in': string;
        'ease-out': string;
        'ease-in-out': string;
    };
    animations: {
        spin: string;
        ping: string;
        pulse: string;
        bounce: string;
    };
    states: {
        _: null;
        motionSafe: string;
        motionReduce: string;
        first: string;
        last: string;
        odd: string;
        even: string;
        visited: string;
        checked: string;
        focusWithin: string;
        hover: string;
        focus: string;
        focusVisible: string;
        active: string;
        disabled: string;
        placeholder: string;
    };
};
declare type DefaultTheme = typeof defaultTheme;

declare const getPreflightStyles: (theme: ITheme) => string;

declare type PropsScreens<T extends Props> = T['theme'] extends {
    screens: Screens;
} ? T['theme']['screens'] : Screens;
declare const getScreens: <T extends Props<_xstyled_util.ITheme>>(props: T) => PropsScreens<T>;
declare type PropsStates<T extends Props> = T['theme'] extends {
    states: States;
} ? T['theme']['states'] : Screens;
declare const getStates: <T extends Props<_xstyled_util.ITheme>>(props: T) => PropsStates<T>;
declare type PropsScreensVariants<T extends Props> = {
    [P in keyof PropsScreens<T>]: string | null;
};
declare type PropsVariants<T extends Props> = PropsScreensVariants<T> & PropsStates<T>;
declare const getVariants: <T extends Props<_xstyled_util.ITheme>>(props: T) => PropsVariants<T>;

/**
 * Minimum breakpoint width.
 * Null for the smallest breakpoint.
 */
declare const getBreakpointMin: <T extends Screens>(screens: T, key: keyof T) => string | null;
/**
 * Maximum breakpoint width. Null for the largest (last) breakpoint.
 * The maximum value is calculated as the minimum of the next one less 0.02px
 * to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
 * See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
 * Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
 * See https://bugs.webkit.org/show_bug.cgi?id=178261
 */
declare const getBreakpointMax: <T extends Screens>(screens: T, key: keyof T) => string | null;

export { AlignContentProps, AlignItemsProps, AlignSelfProps, Angle, AnimationDurationProps, AnimationProps, AnimationTimingFunctionProps, AnimationsProps, AppearanceProps, BackgroundAttachmentProps, BackgroundClipProps, BackgroundColorProps, BackgroundImageProps, BackgroundPositionProps, BackgroundProps, BackgroundRepeatProps, BackgroundSizeProps, BackgroundsProps, Border, BorderBottomColorProps, BorderBottomProps, BorderBottomStyleProps, BorderBottomWidthProps, BorderCollapseProps, BorderColorProps, BorderLeftColorProps, BorderLeftProps, BorderLeftStyleProps, BorderLeftWidthProps, BorderProps, BorderRadiusProps, BorderRightColorProps, BorderRightProps, BorderRightStyleProps, BorderRightWidthProps, BorderStyleProps, BorderTopColorProps, BorderTopProps, BorderTopStyleProps, BorderTopWidthProps, BorderWidth, BorderWidthProps, BordersProps, BottomProps, BoxShadowProps, BoxSizingProps, CSSFromProps, CSSObject, CSSOption, CSSProperties, CSSPseudos, CSSScalar, ColProps, Color, ColorProps, ColorTones, ColorVariants, Colors, ColumnGapProps, ContainerProps, CursorProps, DefaultAlphaVariants, DefaultTheme, DisplayProps, DivideColorProps, DivideStyleProps, DivideXProps, DivideXReverseProps, DivideYProps, DivideYReverseProps, Duration, EffectsProps, FillProps, FlexBasisProps, FlexDirectionProps, FlexGrowProps, FlexProps, FlexShrinkProps, FlexWrapProps, FlexboxGridsProps, FlexboxesProps, FloatProps, FontFamilyProps, FontSize, FontSizeProps, FontStyleProps, FontWeightProps, GapProps, GradientFromProps, GradientToProps, GradientViaProps, GridAreaProps, GridAutoColumnsProps, GridAutoFlowProps, GridAutoRowsProps, GridColumnProps, GridRowProps, GridTemplateAreasProps, GridTemplateColumnsProps, GridTemplateRowsProps, GridsProps, HeightProps, Inset, InteractivityProps, JustifyContentProps, JustifyItemsProps, JustifySelfProps, LayoutProps, LeftProps, LetterSpacing, LetterSpacingProps, LineHeight, LineHeightProps, ListStylePositionProps, ListStyleTypeProps, MarginBottomProps, MarginLeftProps, MarginProps, MarginRightProps, MarginTopProps, MarginXProps, MarginYProps, MaskSizeProps, MaxHeightProps, MaxWidthProps, MinHeightProps, MinWidthProps, Mixin, NamespaceType, ObjectFitProps, OpacityProps, OrderProps, OutlineColorProps, OutlineOffsetProps, OutlineProps, OutlineStyleProps, OutlineWidthProps, OverflowProps, OverflowXProps, OverflowYProps, OverscrollBehaviorProps, PaddingBottomProps, PaddingLeftProps, PaddingProps, PaddingRightProps, PaddingTopProps, PaddingXProps, PaddingYProps, Percent, Pixel, PointerEventsProps, PositionProps, Radius, ResizeProps, RightProps, RingColorProps, RingInsetProps, RingProps, RingWidth, RotateProps, RowGapProps, RowProps, ScaleProps, ScaleXProps, ScaleYProps, Screens, Size, SizingProps, SkewXProps, SkewYProps, Space, SpaceProps, SpaceXProps, SpaceXReverseProps, SpaceYProps, SpaceYReverseProps, States, StrokeProps, StyleGenerator, StyleGeneratorProps, StyleGeneratorPropsConcat, StyleOptions, SvgProps, SystemProp, SystemProps, TableLayoutProps, TablesProps, TextAlignProps, TextDecorationProps, TextOverflowProps, TextProps, TextShadowProps, TextTransformProps, Theme, ThemeAlias, ThemeAnimation, ThemeBorder, ThemeBorderColor, ThemeBorderStyle, ThemeBorderWidth, ThemeColor, ThemeDuration, ThemeFont, ThemeFontSize, ThemeFontWeight, ThemeGetter, ThemeGetterType, ThemeInset, ThemeLetterSpacing, ThemeLineHeight, ThemeNamespace, ThemeNamespaceValue, ThemeProp, ThemeRadius, ThemeRingWidth, ThemeScreens, ThemeShadow, ThemeSize, ThemeSpace, ThemeStates, ThemeText, ThemeTimingFunction, ThemeTransform, ThemeTransition, ThemeTransitionProperty, ThemeValue, ThemeVariants, ThemeZIndex, TopProps, TransformOriginProps, TransformProps, TransformValue, Transformers, TransformsProps, TransitionDelayProps, TransitionDurationProps, TransitionPropertyProps, TransitionProps, TransitionTimingFunctionProps, TransitionsProps, TranslateXProps, TranslateYProps, TypographyProps, UserSelectProps, Variants, VerticalAlignProps, VisibilityProps, WhiteSpaceProps, WidthProps, ZIndexProps, aliasColor, alignContent, alignItems, alignSelf, animation, animationDuration, animationTimingFunction, animations, appearance, background, backgroundAttachment, backgroundClip, backgroundColor, backgroundImage, backgroundPosition, backgroundRepeat, backgroundSize, backgrounds, between, border, borderBottom, borderBottomColor, borderBottomStyle, borderBottomWidth, borderCollapse, borderColor, borderLeft, borderLeftColor, borderLeftStyle, borderLeftWidth, borderRadius, borderRight, borderRightColor, borderRightStyle, borderRightWidth, borderStyle, borderTop, borderTopColor, borderTopStyle, borderTopWidth, borderWidth, borders, bottom, boxShadow, boxSizing, breakpoints, col, color, columnGap, compose, container, createStyleGenerator, cursor, defaultTheme, display, divideColor, divideStyle, divideX, divideXReverse, divideY, divideYReverse, down, effects, fill, flex, flexBasis, flexDirection, flexGrow, flexShrink, flexWrap, flexboxGrids, flexboxes, float, fontFamily, fontSize, fontStyle, fontWeight, gap, generateHexAlphaVariants, getAngle, getAnimation, getBorder, getBorderColor, getBorderStyle, getBorderWidth, getBreakpointMax, getBreakpointMin, getColor, getDuration, getFont, getFontSize, getFontWeight, getInset, getLetterSpacing, getLineHeight, getPercent, getPreflightStyles, getPx, getRadius, getRingWidth, getScreens, getShadow, getSize, getSpace, getStates, getTimingFunction, getTransform, getTransition, getTransitionProperty, getVariants, getZIndex, gradientFrom, gradientTo, gradientVia, gridArea, gridAutoColumns, gridAutoFlow, gridAutoRows, gridColumn, gridRow, gridTemplateAreas, gridTemplateColumns, gridTemplateRows, grids, height, interactivity, justifyContent, justifyItems, justifySelf, layout, left, letterSpacing, lineHeight, listStylePosition, listStyleType, margin, marginBottom, marginLeft, marginRight, marginTop, maskSize, maxHeight, maxWidth, minHeight, minWidth, mx, my, objectFit, opacity, order, outline, outlineColor, outlineOffset, outlineStyle, outlineWidth, overflow, overflowX, overflowY, overscrollBehavior, padding, paddingBottom, paddingLeft, paddingRight, paddingTop, pointerEvents, position, px, py, resize, right, ring, ringColor, ringInset, rotate, row, rowGap, rpxTransformers, scale, scaleX, scaleY, sizing, skewX, skewY, space, spaceX, spaceXReverse, spaceY, spaceYReverse, stroke, style, svg, system, tableLayout, tables, text, textAlign, textDecoration, textOverflow, textShadow, textTransform, th, themeGetter, top, transform, transformOrigin, transforms, transition, transitionDelay, transitionDuration, transitionProperty, transitionTimingFunction, transitions, translateX, translateY, typography, up, userSelect, verticalAlign, visibility, whiteSpace, width, zIndex };
