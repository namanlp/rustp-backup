'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/* eslint-disable no-console */
var DEV = process.env.NODE_ENV !== 'production';
var identity = function identity(x) {
  return x;
};
var is = function is(n) {
  return n !== undefined && n !== null;
};
var num = function num(n) {
  return typeof n === 'number' && !Number.isNaN(n);
};
var string = function string(n) {
  return typeof n === 'string' && n !== '';
};
var obj = function obj(n) {
  return typeof n === 'object' && n !== null;
};
var func = function func(n) {
  return typeof n === 'function';
};
var negative = function negative(n) {
  return num(n) && n < 0;
};
var get = function get(from, path) {
  var paths = String(path).split('.');
  var pathsLength = paths.length;
  var result = from;

  for (var i = 0; i < pathsLength; i += 1) {
    if (result === undefined) return result;
    var _path = paths[i];
    result = is(result[_path]) ? result[_path] : undefined;
  }

  return result;
};
var assign = function assign(a, b) {
  if (!is(b)) return a; // eslint-disable-next-line no-restricted-syntax, guard-for-in

  for (var key in b) {
    a[key] = b[key];
  }

  return a;
};
var merge = function merge(a, b) {
  if (!is(b)) return a; // eslint-disable-next-line no-restricted-syntax

  for (var key in b) {
    // eslint-disable-next-line no-continue
    if (obj(a[key])) {
      a[key] = merge(assign({}, a[key]), b[key]);
    } else {
      a[key] = b[key];
    }
  }

  return a;
};
var warn = function warn(condition, message) {
  if (DEV) {
    if (!condition && console.error) {
      console.error(message);
    }
  }
};
function cascade(value, arg) {
  if (typeof value === 'function') {
    return cascade(value(arg), arg);
  }

  return value;
}
var getThemeValue = function getThemeValue(props, path, initial) {
  if (initial === void 0) {
    initial = props.theme;
  }

  return cascade(get(initial, path), props);
};
function omit(object, values) {
  var result = {}; // eslint-disable-next-line no-restricted-syntax

  for (var key in object) {
    if (values.indexOf(key) === -1) {
      result[key] = object[key];
    }
  }

  return result;
}
/* eslint-disable no-continue, no-loop-func, no-cond-assign */

function flattenStrings(array) {
  return array.reduce(function (flattenedArray, value) {
    var lastIndex = flattenedArray.length - 1;
    var last = flattenedArray[lastIndex];

    if (typeof last === 'string' && typeof value === 'string') {
      flattenedArray[lastIndex] = last + value;
    } else {
      flattenedArray.push(value);
    }

    return flattenedArray;
  }, []);
}

function flattenDown(array, result) {
  for (var i = 0; i < array.length; i++) {
    var value = array[i];

    if (Array.isArray(value)) {
      flattenDown(value, result);
    } else {
      result.push(value);
    }
  }

  return result;
}

function flatten(array) {
  return flattenDown(array, []);
}

exports.assign = assign;
exports.cascade = cascade;
exports.flatten = flatten;
exports.flattenStrings = flattenStrings;
exports.func = func;
exports.get = get;
exports.getThemeValue = getThemeValue;
exports.identity = identity;
exports.is = is;
exports.merge = merge;
exports.negative = negative;
exports.num = num;
exports.obj = obj;
exports.omit = omit;
exports.string = string;
exports.warn = warn;
