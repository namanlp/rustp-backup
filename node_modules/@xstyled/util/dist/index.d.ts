declare type Path = string | number;
interface ITheme {
    [key: string]: any;
    [key: number]: any;
}
interface Props<T extends ITheme = ITheme> {
    [key: string]: any;
    [key: number]: any;
    theme?: T;
}

/**
 * Identity function.
 */
declare const identity: <T>(x: T) => T;
/**
 * Check if a value is not null and not undefined.
 */
declare const is: <T>(n: T) => n is Exclude<T, null | undefined>;
/**
 * Check if a value is a number.
 */
declare const num: (n: unknown) => n is number;
/**
 * Check if a value is a string.
 */
declare const string: (n: unknown) => n is string;
/**
 * Check if a value is an object.
 */
declare const obj: (n: unknown) => n is {
    [key: string]: unknown;
    [key: number]: unknown;
};
/**
 * Check if a value is a function.
 */
declare const func: (n: unknown) => n is Function;
/**
 * Check if a value is a negative number.
 */
declare const negative: (n: unknown) => n is number;
/**
 * Get a value from an object or an array.
 */
declare const get: (from: unknown, path: Path) => unknown;
/**
 * Assign object into another
 */
declare const assign: <T, U>(target: T, source: U) => T & U;
/**
 * Merge deeply one object into another.
 */
declare const merge: <T, U>(target: T, source: U) => T & U;
/**
 * Warn if a condition is not met.
 */
declare const warn: (condition: boolean, message: string) => void;
/**
 * Recursively call a function until getting something that is not a function.
 */
declare function cascade(value: unknown, arg?: unknown): Exclude<any, Function>;
/**
 * Get value from theme.
 */
declare const getThemeValue: <T extends Props<ITheme>>(props: T, path: Path, initial?: unknown) => unknown;
/**
 * Omit values from an object.
 */
declare function omit<T extends {
    [key: string]: unknown;
}, K extends string[]>(object: T, values: K): Pick<T, Exclude<keyof T, K[number]>>;
/**
 * Flatten every string together in an array.
 */
declare function flattenStrings(array: any[]): any[];
/**
 * Flatten an array.
 */
declare function flatten(array: any[]): any[];

export { ITheme, Path, Props, assign, cascade, flatten, flattenStrings, func, get, getThemeValue, identity, is, merge, negative, num, obj, omit, string, warn };
