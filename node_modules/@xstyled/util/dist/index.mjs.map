{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["import { Props, Path } from './types'\n\nexport * from './types'\n\nconst DEV = process.env.NODE_ENV !== 'production'\n\nconst specialProperties = ['__proto__', 'constructor', 'prototype'];\n/**\n * Identity function.\n */\nexport const identity = <T>(x: T): T => x\n\n/**\n * Check if a value is not null and not undefined.\n */\nexport const is = <T>(n: T): n is Exclude<T, undefined | null> =>\n  n !== undefined && n !== null\n\n/**\n * Check if a value is a number.\n */\nexport const num = (n: unknown): n is number =>\n  typeof n === 'number' && !Number.isNaN(n)\n\n/**\n * Check if a value is a string.\n */\nexport const string = (n: unknown): n is Exclude<string, ''> =>\n  typeof n === 'string' && n !== ''\n\n/**\n * Check if a value is an object.\n */\nexport const obj = (\n  n: unknown,\n): n is { [key: string]: unknown; [key: number]: unknown } =>\n  typeof n === 'object' && n !== null\n\n/**\n * Check if a value is a function.\n */\nexport const func = (n: unknown): n is Function => typeof n === 'function'\n\n/**\n * Check if a value is a negative number.\n */\nexport const negative = (n: unknown): n is number => num(n) && n < 0\n\n/**\n * Get a value from an object or an array.\n */\nexport const get = (from: unknown, path: Path): unknown => {\n  const paths = String(path).split('.')\n  const pathsLength = paths.length\n  let result: any = from\n  for (let i = 0; i < pathsLength; i += 1) {\n    if (!is(result)) return result\n    const path = paths[i]\n    result = is(result[path]) ? result[path] : undefined\n  }\n  return result\n}\n\n/**\n * Assign object into another\n */\nexport const assign = <T, U>(target: T, source: U): T & U => {\n  if (!is(source)) return target as T & U\n  for (const key in source) {\n    if (specialProperties.indexOf(key) !== -1) {\n      continue;\n    }\n    // @ts-ignore\n    target[key] = source[key]\n  }\n  return target as T & U\n}\n\n/**\n * Merge deeply one object into another.\n */\nexport const merge = <T, U>(target: T, source: U): T & U => {\n  if (!is(source)) return target as T & U\n  for (const key in source) {\n    if (specialProperties.indexOf(key) !== -1) {\n      continue;\n    }\n    // @ts-ignore\n    if (obj(target[key])) {\n      // @ts-ignore\n      target[key] = merge(assign({}, target[key]), source[key])\n    } else {\n      // @ts-ignore\n      target[key] = source[key]\n    }\n  }\n  return target as T & U\n}\n\n/**\n * Warn if a condition is not met.\n */\nexport const warn = (condition: boolean, message: string): void => {\n  if (DEV) {\n    if (!condition && console.error) {\n      console.error(message)\n    }\n  }\n}\n\n/**\n * Recursively call a function until getting something that is not a function.\n */\nexport function cascade(value: unknown, arg?: unknown): Exclude<any, Function> {\n  if (typeof value === 'function') {\n    return cascade(value(arg), arg)\n  }\n  return value\n}\n\n/**\n * Get value from theme.\n */\nexport const getThemeValue = <T extends Props>(\n  props: T,\n  path: Path,\n  initial: unknown = props.theme,\n): unknown => cascade(get(initial, path), props)\n\n/**\n * Omit values from an object.\n */\nexport function omit<T extends { [key: string]: unknown }, K extends string[]>(\n  object: T,\n  values: K,\n): Pick<T, Exclude<keyof T, K[number]>> {\n  const result: { [key: string]: unknown } = {}\n  for (const key in object) {\n    if (values.indexOf(key) === -1) {\n      result[key] = object[key]\n    }\n  }\n  return result as Pick<T, Exclude<keyof T, K[number]>>\n}\n\n/**\n * Flatten every string together in an array.\n */\nexport function flattenStrings(array: any[]): any[] {\n  return array.reduce((flattenedArray, value) => {\n    const lastIndex = flattenedArray.length - 1\n    const last = flattenedArray[lastIndex]\n    if (typeof last === 'string' && typeof value === 'string') {\n      flattenedArray[lastIndex] = last + value\n    } else {\n      flattenedArray.push(value)\n    }\n    return flattenedArray\n  }, [])\n}\n\nfunction flattenDown(array: any[], result: any[]) {\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i]\n\n    if (Array.isArray(value)) {\n      flattenDown(value, result)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Flatten an array.\n */\nexport function flatten(array: any[]): any[] {\n  return flattenDown(array, [])\n}\n"],"names":[],"mappings":"AAIA,MAAM,MAAM,QAAQ,IAAI,aAAa;AAErC,MAAM,oBAAoB,CAAC,aAAa,eAAe;MAI1C,WAAW,CAAI,MAAY;MAK3B,KAAK,CAAI,MACpB,MAAM,UAAa,MAAM;MAKd,MAAM,CAAC,MAClB,OAAO,MAAM,YAAY,CAAC,OAAO,MAAM;MAK5B,SAAS,CAAC,MACrB,OAAO,MAAM,YAAY,MAAM;MAKpB,MAAM,CACjB,MAEA,OAAO,MAAM,YAAY,MAAM;MAKpB,OAAO,CAAC,MAA8B,OAAO,MAAM;MAKnD,WAAW,CAAC,MAA4B,IAAI,MAAM,IAAI;MAKtD,MAAM,CAAC,MAAe,SAAwB;AACzD,QAAM,QAAQ,OAAO,MAAM,MAAM;AACjC,QAAM,cAAc,MAAM;AAC1B,MAAI,SAAc;AAClB,WAAS,IAAI,GAAG,IAAI,aAAa,KAAK,GAAG;AACvC,QAAI,CAAC,GAAG;AAAS,aAAO;AACxB,UAAM,QAAO,MAAM;AACnB,aAAS,GAAG,OAAO,UAAS,OAAO,SAAQ;AAAA;AAE7C,SAAO;AAAA;MAMI,SAAS,CAAO,QAAW,WAAqB;AAC3D,MAAI,CAAC,GAAG;AAAS,WAAO;AACxB,aAAW,OAAO,QAAQ;AACxB,QAAI,kBAAkB,QAAQ,SAAS,IAAI;AACzC;AAAA;AAGF,WAAO,OAAO,OAAO;AAAA;AAEvB,SAAO;AAAA;MAMI,QAAQ,CAAO,QAAW,WAAqB;AAC1D,MAAI,CAAC,GAAG;AAAS,WAAO;AACxB,aAAW,OAAO,QAAQ;AACxB,QAAI,kBAAkB,QAAQ,SAAS,IAAI;AACzC;AAAA;AAGF,QAAI,IAAI,OAAO,OAAO;AAEpB,aAAO,OAAO,MAAM,OAAO,IAAI,OAAO,OAAO,OAAO;AAAA,WAC/C;AAEL,aAAO,OAAO,OAAO;AAAA;AAAA;AAGzB,SAAO;AAAA;MAMI,OAAO,CAAC,WAAoB,YAA0B;AACjE,MAAI,KAAK;AACP,QAAI,CAAC,aAAa,QAAQ,OAAO;AAC/B,cAAQ,MAAM;AAAA;AAAA;AAAA;iBAQI,OAAgB,KAAuC;AAC7E,MAAI,OAAO,UAAU,YAAY;AAC/B,WAAO,QAAQ,MAAM,MAAM;AAAA;AAE7B,SAAO;AAAA;MAMI,gBAAgB,CAC3B,OACA,MACA,UAAmB,MAAM,UACb,QAAQ,IAAI,SAAS,OAAO;cAMxC,QACA,QACsC;AACtC,QAAM,SAAqC;AAC3C,aAAW,OAAO,QAAQ;AACxB,QAAI,OAAO,QAAQ,SAAS,IAAI;AAC9B,aAAO,OAAO,OAAO;AAAA;AAAA;AAGzB,SAAO;AAAA;wBAMsB,OAAqB;AAClD,SAAO,MAAM,OAAO,CAAC,gBAAgB,UAAU;AAC7C,UAAM,YAAY,eAAe,SAAS;AAC1C,UAAM,OAAO,eAAe;AAC5B,QAAI,OAAO,SAAS,YAAY,OAAO,UAAU,UAAU;AACzD,qBAAe,aAAa,OAAO;AAAA,WAC9B;AACL,qBAAe,KAAK;AAAA;AAEtB,WAAO;AAAA,KACN;AAAA;AAGL,qBAAqB,OAAc,QAAe;AAChD,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAM,QAAQ,MAAM;AAEpB,QAAI,MAAM,QAAQ,QAAQ;AACxB,kBAAY,OAAO;AAAA,WACd;AACL,aAAO,KAAK;AAAA;AAAA;AAIhB,SAAO;AAAA;iBAMe,OAAqB;AAC3C,SAAO,YAAY,OAAO;AAAA;;;;"}