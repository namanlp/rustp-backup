"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpeakableJsonLd = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _jsonld = require("./jsonld");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * The speakable schema.org property identifies sections within an article or
 * webpage that are best suited for audio playback using text-to-speech (TTS).
 *
 * @remarks
 *
 * Adding markup allows search engines and other applications to identify
 * content to read aloud on Google Assistant-enabled devices using TTS. Webpages
 * with speakable structured data can use the Google Assistant to distribute the
 * content through new channels and reach a wider base of users.
 *
 * ``` tsx
 * const Component = () => <SpeakableJsonLd cssSelector={['#abc', '#root']} />;
 * ```
 *
 * @beta
 */
var SpeakableJsonLd = function SpeakableJsonLd(_ref) {
  var xpath = _ref.xpath,
      cssSelector = _ref.cssSelector,
      _ref$overrides = _ref.overrides,
      overrides = _ref$overrides === void 0 ? {} : _ref$overrides,
      _ref$defer = _ref.defer,
      defer = _ref$defer === void 0 ? false : _ref$defer;

  if (xpath && cssSelector) {
    throw new Error('Speakable should use either xpath or the cssSelector, not both.');
  }

  var json = _objectSpread({
    '@context': 'https://schema.org',
    '@type': 'SpeakableSpecification',
    cssSelector: cssSelector,
    xpath: xpath
  }, overrides);

  return /*#__PURE__*/_react["default"].createElement(_jsonld.JsonLd, {
    defer: defer,
    json: json
  });
};

exports.SpeakableJsonLd = SpeakableJsonLd;