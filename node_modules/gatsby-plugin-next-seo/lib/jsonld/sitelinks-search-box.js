"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SitelinksSearchBoxJsonLd = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _jsonld = require("./jsonld");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * The `SitelinksSearchBoxJsonLd` component can be used to add JSON-LD structured data to your website
 * for a Sitelinks search box.
 *
 * @remarks
 *
 * See
 * {@link https://developers.google.com/search/docs/advanced/structured-data/sitelinks-searchbox | here}
 * for further documentation.
 *
 * ```jsx
 * import React from 'react';
 * import { SitelinksSearchBoxJsonLd } from 'gatsby-plugin-next-seo';
 *
 * export default () => (
 *   <>
 *     <h1>Sitelinks Search Box JSON-LD</h1>
 *     <SitelinksSearchBoxJsonLd
 *       url='https://example.com/'
 *       searchHandlerQueryStringUrl='https://example.com/?q='
 *     />
 *   </>
 * );
 * ```
 */
var SitelinksSearchBoxJsonLd = function SitelinksSearchBoxJsonLd(_ref) {
  var url = _ref.url,
      searchHandlerQueryStringUrl = _ref.searchHandlerQueryStringUrl,
      _ref$overrides = _ref.overrides,
      overrides = _ref$overrides === void 0 ? {} : _ref$overrides,
      _ref$defer = _ref.defer,
      defer = _ref$defer === void 0 ? false : _ref$defer;
  var searchTarget = {
    '@type': 'EntryPoint',
    urlTemplate: "".concat(searchHandlerQueryStringUrl, "{search_term_string}")
  };
  /**
   * Defining type SearchActionWithQueryInput to allow 'query-input' property on SearchAction inspired by post:
   *   https://github.com/google/schema-dts/issues/33#issuecomment-706680584
   */

  var searchAction = {
    '@type': 'SearchAction',
    target: searchTarget,
    'query-input': 'required name=search_term_string'
  };

  var json = _objectSpread({
    '@context': 'https://schema.org',
    '@type': 'WebSite',
    url: url,
    potentialAction: searchAction
  }, overrides);

  return /*#__PURE__*/_react["default"].createElement(_jsonld.JsonLd, {
    defer: defer,
    json: json
  });
};

exports.SitelinksSearchBoxJsonLd = SitelinksSearchBoxJsonLd;